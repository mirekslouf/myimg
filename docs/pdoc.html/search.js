window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "myimg", "modulename": "myimg", "kind": "module", "doc": "<h2 id=\"package-myimg\">Package: MyImg</h2>\n\n<p>Tools for processing of microscopic images.</p>\n\n<ul>\n<li>Simple things: insert scalebar, cut off lower bar, insert label ...</li>\n<li>Further utilities: multi-images, Fourier transform, diffraction patterns ...  </li>\n</ul>\n\n<p>See myimg.api for a simple user interface.</p>\n"}, {"fullname": "myimg.api", "modulename": "myimg.api", "kind": "module", "doc": "<h2 id=\"module-myimgapi\">Module: myimg.api</h2>\n\n<p>A simple interface to package myimg.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Simple usage of myimg.api interface</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimage.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (1) Open image</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyImage</span><span class=\"p\">(</span><span class=\"s1\">&#39;somefile.bmp&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># input image: somefile.bmp</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (2) Modify the image </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">cut</span><span class=\"p\">(</span><span class=\"mi\">60</span><span class=\"p\">)</span>                <span class=\"c1\"># cut off lower bar (60 pixels)             </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span>             <span class=\"c1\"># label to the upper-left corner</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">(</span><span class=\"s1\">&#39;rwi,100um&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># scalebar to the lower-right corner</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (3) Save the modified image </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">save_with_ext</span><span class=\"p\">(</span><span class=\"s1\">&#39;_clm.png&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># output: somefile_clm.png</span>\n</code></pre>\n</div>\n\n<p>More examples are spread all over the documentation.</p>\n\n<ol>\n<li>How to use myimg.objects:\n<ul>\n<li>myimg.objects.MyImage = single image = the basic object with many methods</li>\n<li>myimg.objects.Montage = multi-image = a rectangular grid of images</li>\n</ul></li>\n<li>Specific frequent tasks:\n<ul>\n<li>myimg.objects.MyImage.scalebar = a method to insert scalebar</li>\n<li>myimg.objects.MyImage.label = a method to insert label in the corner</li>\n</ul></li>\n<li>Additional utilities:\n<ul>\n<li>myimg.utils = sub-package with special/more complex utilities</li>\n<li>myimg.utils.scalebar = the code for myimg.objects.MyImg.scalebar method</li>\n<li>myimg.utils.label = the code for myimg.objects.MyImg.label method</li>\n<li>myimg.utils.fft = additional utilities, Fourier transforms</li>\n</ul></li>\n</ol>\n"}, {"fullname": "myimg.api.MyImage", "modulename": "myimg.api", "qualname": "MyImage", "kind": "class", "doc": "<p>Class defining MyImage objects.</p>\n\n<ul>\n<li>MyImage object = image-name + PIL-image-object + various methods.</li>\n<li>This class is just inherited from myimg.objects.MyImage.</li>\n<li>More help: <a href=\"https://mirekslouf.github.io/myimg/docs/pdoc.html/myimg.html\">https://mirekslouf.github.io/myimg/docs/pdoc.html/myimg.html</a></li>\n</ul>\n", "bases": "myimg.objects.MyImage"}, {"fullname": "myimg.api.Montage", "modulename": "myimg.api", "qualname": "Montage", "kind": "class", "doc": "<p>Class defining Montage objects.</p>\n\n<ul>\n<li>Montage object = a rectangular multi-image.</li>\n<li>This class is just inherited from myimg.objects.Montage. </li>\n<li>More help: <a href=\"https://mirekslouf.github.io/myimg/docs/pdoc.html/myimg.html\">https://mirekslouf.github.io/myimg/docs/pdoc.html/myimg.html</a></li>\n</ul>\n", "bases": "myimg.objects.Montage"}, {"fullname": "myimg.api.Utils", "modulename": "myimg.api", "qualname": "Utils", "kind": "class", "doc": "<p>Additional utilities of myimg package.</p>\n\n<ul>\n<li><p>Basic utilities are accessible as methods of MyImage object:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">myimg.api</span> <span class=\"kn\">import</span> <span class=\"n\">mi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyImage</span><span class=\"p\">(</span><span class=\"s1\">&#39;someimage.bmp&#39;</span><span class=\"p\">)</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">(</span><span class=\"s1\">&#39;rwi,100um&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># basic utility, called as a method</span>\n</code></pre>\n</div></li>\n<li><p>Additional utilities can be called as functions of Utils package:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">myimg.api</span> <span class=\"kn\">import</span> <span class=\"n\">mi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyImage</span><span class=\"p\">(</span><span class=\"s1\">&#39;someimage.bmp&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">Utils</span><span class=\"o\">.</span><span class=\"n\">fourier</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>  <span class=\"c1\"># additional utility, called as a function</span>\n</code></pre>\n</div></li>\n</ul>\n"}, {"fullname": "myimg.api.Settings", "modulename": "myimg.api", "qualname": "Settings", "kind": "class", "doc": "<p>Settings for package myimg.</p>\n\n<ul>\n<li>This class imports all classes from myimg.settings.</li>\n<li>Thanks to this import, we can use Settings myimg.api as follows:</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimg.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">Settings</span><span class=\"o\">.</span><span class=\"n\">Scalebar</span><span class=\"o\">.</span><span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">650</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "myimg.api.Settings.Scalebar", "modulename": "myimg.api", "qualname": "Settings.Scalebar", "kind": "class", "doc": "<p>Default parameters of scalebars (dimensions, font, ...).</p>\n\n<ul>\n<li>most dimensions in this section = fractions of image height</li>\n<li>only default/precalculated lenght of scalebar = 1/6 * image_width</li>\n<li>default/precalculated position = lower-right corner (if position=None)</li>\n</ul>\n"}, {"fullname": "myimg.api.Settings.Label", "modulename": "myimg.api", "qualname": "Settings.Label", "kind": "class", "doc": "<p>Default parameters of image labels (dimensions, font, ...).</p>\n\n<ul>\n<li>all dimensions in this section = multiples of image height</li>\n<li>the default font size is similar as in the case of Scalebar</li>\n</ul>\n"}, {"fullname": "myimg.api.Settings.MicCalibrations", "modulename": "myimg.api", "qualname": "Settings.MicCalibrations", "kind": "class", "doc": "<p>Microscope calibration constants.</p>\n\n<ul>\n<li>This dataclass is a container for several sub-dataclasses.</li>\n<li>The subdataclasses define the individual calibrated microscopes.</li>\n</ul>\n\n<p>Calculation of calibration constant for given microscope</p>\n\n<ul>\n<li>mag   = magnification, for which we know rwi</li>\n<li>rwi   = real width of image (in our case given in [mm]</li>\n<li>const = calibration constant = rwi * mag</li>\n</ul>\n\n<p>Usage of calibration constants</p>\n\n<ul>\n<li>rwi at given mag: rwi = const/mag (const = calibration constant)</li>\n<li>Warning: for EM microscopes, these relations may be just approximate</li>\n</ul>\n\n<p>Justification</p>\n\n<ul>\n<li>2x higher mag =&gt; 2x lower rwi</li>\n<li>4x higher mag =&gt; 4x lower rwi</li>\n<li>Therefore (according to elementary logic)\n<ul>\n<li>rwi = some_constant/mag</li>\n<li>const = some_constant = calibration_constant = rwi * mag</li>\n<li>physical meaning of calibration const:\nfor given microscope, const = rwi of image at mag=1x</li>\n</ul></li>\n</ul>\n\n<p>Usage of this dataclass =&gt; subclasses of this dataclass</p>\n\n<ul>\n<li>This dataclass is usually not used directly.</li>\n<li>The data are employed within the myimg package.</li>\n<li><p>Nevertheless, a short example follows:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimg.settings</span> <span class=\"k\">as</span> <span class=\"nn\">Settings</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Settings</span><span class=\"o\">.</span><span class=\"n\">MicCalibrations</span><span class=\"o\">.</span><span class=\"n\">TecnaiVeleta</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"p\">)</span>\n</code></pre>\n</div></li>\n</ul>\n"}, {"fullname": "myimg.api.Settings.MicDescriptionFiles", "modulename": "myimg.api", "qualname": "Settings.MicDescriptionFiles", "kind": "class", "doc": "<p>Microscope description files.</p>\n\n<ul>\n<li>Some microscopes yield micrographs <em>with</em> text description files.</li>\n<li>The description file contains additional info about the micrograph.\n<ul>\n<li>the filename is usually similar to the micrograph/image file</li>\n<li>the description file contains information about the pixel size</li>\n<li>therefore, a description file can be used\nfor the micrograph calibration</li>\n</ul></li>\n</ul>\n"}, {"fullname": "myimg.objects", "modulename": "myimg.objects", "kind": "module", "doc": "<h2 id=\"module-myimgobjects\">Module: myimg.objects</h2>\n\n<p>Key classes/objects for myimg package:</p>\n\n<ol>\n<li><em>MyImage</em> class\ndefines the basic MyImg object,\nwhich is used in most image manipulations.</li>\n<li><em>Montage</em> class\ndefines a montage/combination of several images,\nwhich are arranged in a rectangular grid/multi-image.</li>\n<li><em>Units, NumberWithUnits and ScaleWithUnits</em> classes\ndefines allowed units, number-with-units and scale-with-units, respectively.</li>\n</ol>\n\n<h2 id=\"examples-how-does-it-work\">Examples = how does it work?</h2>\n\n<p><em>MyImage</em> class creates the basic object,\nwhich is used in most image manipulations within myimg.api module.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># MyImage class :: simple example (short but real)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimage.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>      <span class=\"c1\"># import API, which provides a simple UI</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyImage</span><span class=\"p\">(</span><span class=\"s1\">&#39;some.bmp&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># open image: some.bmp</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span>                <span class=\"c1\"># insert a label in the upper left corner</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">(</span><span class=\"s1\">&#39;rwi,100um&#39;</span><span class=\"p\">)</span>     <span class=\"c1\"># insert a scalebar to the lower right corner</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">save_with_ext</span><span class=\"p\">(</span><span class=\"s1\">&#39;_s.png&#39;</span><span class=\"p\">)</span>   <span class=\"c1\"># save the modified image to: some_ls.png</span>\n</code></pre>\n</div>\n\n<p><em>Montage</em> class creates the multi-image object,\nwhich contains several images arranged in a rectangular grid.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Montage class :: simple example (short but real)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimage.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>      <span class=\"c1\"># import API, which provides a simple UI</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">images</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;s1.png&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;s2.png&#39;</span><span class=\"p\">]</span>  <span class=\"c1\"># define input images</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">montage</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">Montage</span><span class=\"p\">(</span><span class=\"n\">images</span><span class=\"p\">,</span>  <span class=\"c1\"># create montage image</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"c1\"># ...grayscale, just two images in a row</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>               <span class=\"c1\"># ...padding/spacing between imgs = 10pixels</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">montage</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">&#39;mreport.png&#39;</span><span class=\"p\">)</span>   <span class=\"c1\"># save the final montage of (the two) images   </span>\n</code></pre>\n</div>\n\n<p><em>Units, NumberWithUnits, and ScaleWithUnits</em> classes\nare used in myimg.utils.scalebar module\nwhen creating scalebars (as a scalebar contains <em>number with units</em>).</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Units, NumberWithUnits and ScaleWithUnits classes :: typical/indirect use </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (the classes are employed behind the scenes when calling scalebar method</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyImage</span><span class=\"p\">(</span><span class=\"s1\">&#39;some.bmp&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># open image: some.bmp</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">(</span><span class=\"s1\">&#39;rwi,100um&#39;</span><span class=\"p\">)</span>     <span class=\"c1\"># scalebar (employs Units, NumberWithUnits... </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">save_with_ext</span><span class=\"p\">(</span><span class=\"s1\">&#39;_s.png&#39;</span><span class=\"p\">)</span>   <span class=\"c1\"># save modified image: to some_s.png</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># NumberWithUnits class :: NON-typical/direct use</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (the NumberWithUnits class can be used/tested for various conversions</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">myimg.objects</span> <span class=\"kn\">import</span> <span class=\"n\">NumberWithUnits</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span><span class=\"n\">NumberWithUnits</span><span class=\"p\">(</span><span class=\"s1\">&#39;0.1mm&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Initial number_with_units:&#39;</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>  <span class=\"c1\"># prints 0.1 mm</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Setting correct units...&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">set_correct_units</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>                                <span class=\"c1\"># prints 100 um</span>\n</code></pre>\n</div>\n"}, {"fullname": "myimg.objects.MyImage", "modulename": "myimg.objects", "qualname": "MyImage", "kind": "class", "doc": "<p>Class defining MyImage objects.</p>\n\n<ul>\n<li>MyImage object = image name + PIL image object + extra props/methods.</li>\n<li>See __init__ for more information about initial object parameters.</li>\n<li>More help: <a href=\"https://mirekslouf.github.io/myimg/docs/pdoc.html/myimg.html\">https://mirekslouf.github.io/myimg/docs/pdoc.html/myimg.html</a></li>\n</ul>\n"}, {"fullname": "myimg.objects.MyImage.__init__", "modulename": "myimg.objects", "qualname": "MyImage.__init__", "kind": "function", "doc": "<p>Initialize MyImage object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str or path-like object):\nName of the image file to work with.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MyImage object</strong>: MyImage object contains:\n(i) name of the original image (MyImage.name),\n(ii) corresponding PIL image object  (MyImage.img), and\n(iii) further properties and methods (MyImage.cut, crop, ...).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span>)</span>"}, {"fullname": "myimg.objects.MyImage.open_image", "modulename": "myimg.objects", "qualname": "MyImage.open_image", "kind": "function", "doc": "<p>Open image file using PIL.Image taking into account all exceptions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str):\nName of the file to open.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>img</strong> (PIL image object):\nThe PIL image object is usually saved in MyImage object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.get_font_size", "modulename": "myimg.objects", "qualname": "MyImage.get_font_size", "kind": "function", "doc": "<p>Get font size (in fontsize units)\ncorresponding to <em>required_font_size_in_pixels</em>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fontname</strong> (str):\nName of the TrueType font to use.\nExample (working in Windows): font_name='timesbd.ttf'</li>\n<li><strong>required_font_size_in_pixels</strong> (float):\nRequired font size in pixels.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>font_size</strong> (int):\nFinal font size (in font units).\nIf the returned <em>font_size</em> (in fontsize units)\nis applied to font with given <em>fontname</em>,\nthen the height of the font (in pixels units)\nwill correspond to <em>required_font_size_in_pixels</em> argument.</li>\n</ul>\n\n<h6 id=\"technical-notes\">Technical notes</h6>\n\n<ul>\n<li>This function is a modified recipe from StackOverflow:\n<a href=\"https://stackoverflow.com/q/4902198\">https://stackoverflow.com/q/4902198</a></li>\n<li>My modification may be a bit slower (not too much)\nbut it seems to be clear and reliable.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">font_name</span>, </span><span class=\"param\"><span class=\"n\">required_font_size_in_pixels</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.to_gray", "modulename": "myimg.objects", "qualname": "MyImage.to_gray", "kind": "function", "doc": "<p>Convert image to grayscale.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>itype</strong> (str, optional, '8bit' or '16bit', default is '8bit'):\nThe image is converted either to 8bit or 16bit grayscale.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The output is saved in self.img.</li>\n</ul>\n\n<h6 id=\"technical-notes\">Technical notes</h6>\n\n<ul>\n<li>Conversion to 16-bit grayscale can be tricky.</li>\n<li>RGB -> 16-bit grayscale conversion is not supported now.</li>\n<li>8-bit-gray -> 16-bit-gray changes dtype to 16bit, but not values.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;8bit&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.to_rgb", "modulename": "myimg.objects", "qualname": "MyImage.to_rgb", "kind": "function", "doc": "<p>Convert image to RGB.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>itype</strong> (str, optional, default is '24bit'):\nThe image is converted to standard RGB image = 24bit = 3*8bit.\nOnly the tandard 24bit RGB images are supported at the moment.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: Te output is saved in self.img.</li>\n</ul>\n\n<h6 id=\"technical-notes\">Technical notes</h6>\n\n<ul>\n<li>Standard RGB format = 24bit RGB = 8 bits for each of (R,G,B) values.</li>\n<li>Other (non-standard) RGB formats are not supported at the moment.</li>\n<li>RGB formats: <a href=\"https://en.wikipedia.org\">https://en.wikipedia.org</a> -> RGB color formats</li>\n<li>Pillow: <a href=\"https://pillow.readthedocs.io\">https://pillow.readthedocs.io</a> -> Handbook - Concepts - Modes</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;24bit&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.to_rgba", "modulename": "myimg.objects", "qualname": "MyImage.to_rgba", "kind": "function", "doc": "<p>Convert image to RGBA.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>itype</strong> (str, optional, default is '32bit'):\nThe image is converted to standard RGBA image = 32bit = 3*8+8bit.\nOnly the tandard 32bit RGBA images are supported at the moment.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: Te output is saved in self.img.</li>\n</ul>\n\n<h6 id=\"technical-notes\">Technical notes</h6>\n\n<ul>\n<li>Standard RGBA format = 32bit RGBA = 8bits (R,G,B) + 8bit alpha.</li>\n<li>Other (non-standard) RGB formats are not supported at the moment.</li>\n<li>RGB formats: <a href=\"https://en.wikipedia.org\">https://en.wikipedia.org</a> -> RGB color formats</li>\n<li>Pillow: <a href=\"https://pillow.readthedocs.io\">https://pillow.readthedocs.io</a> -> Handbook - Concepts - Modes</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;32bit&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.cut", "modulename": "myimg.objects", "qualname": "MyImage.cut", "kind": "function", "doc": "<p>Cut off lower bar with given height.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>height_of_bar</strong> (int):\nHeight of the lower bar to cut.\nLower bars are typical of many microscopic images.\nA lower bar contains information from given microscope,\nbut it is usually removed when preparing the image for publication.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The output is saved in self.img.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">height_of_bar</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.crop", "modulename": "myimg.objects", "qualname": "MyImage.crop", "kind": "function", "doc": "<p>Crop image = keep just selected rectangular area.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rectangle</strong> (tuple of four integers):\nTuple (X1,Y1,X2,Y2),\nwhere X1,Y1 = coordinates of upper left corner\nand X2,Y2 = coordinates of lower right corner.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The output is saved in <em>self.img</em>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rectangle</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.resize", "modulename": "myimg.objects", "qualname": "MyImage.resize", "kind": "function", "doc": "<p>Resize image to new width or height, keeping the aspect ratio.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>width</strong> (int, optional, default is None):\nThe required width of the resized image.\nThe height will be calculated\nso that the aspect ratio was preserved.</li>\n<li><strong>height</strong> (int, optional, default is None):\nThe required height of the resized image.\nThe width will be calculated\nso that the aspect ratio was preserved.</li>\n<li><strong>resample</strong> (int or None):\nIf None, default resampling filter is used (usually Ok).\nIt is also possible to define a specific resampling filter.\nFor sharp images or plots we may prefer no resampling and \nwe can use <em>resampling = 0 = Image.Resampling.NEAREST</em>.\nMore: <a href=\"https://pillow.readthedocs.io\">https://pillow.readthedocs.io</a> -> Reference -> Image -> resize</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The output is saved in <em>self.img</em></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">height</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">resample</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.label", "modulename": "myimg.objects", "qualname": "MyImage.label", "kind": "function", "doc": "<p>Insert a one-letter label in the upper left corner of an image. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>label</strong> (str):\nOne letter label that will be inserted in the upper left corner.</li>\n<li><strong>F</strong> (float, optional, default is None):\nMultiplication coefficient/factor that changes the label size.\nIf F = 1.2, then all label parameters are enlarged 1.2 times.</li>\n<li><strong>kwargs</strong> (list of keyword arguments):\nAllowed keyword arguments are:\ncolor, bcolor, position, stripes, messages.\nSee section <em>List of allowed kwargs</em> for detailed descriptions.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The label is drawn directly to <em>self.img</em>.</li>\n</ul>\n\n<h6 id=\"list-of-allowed-kwargs\">List of allowed kwargs</h6>\n\n<ul>\n<li>color : PIL color specification, default is 'black'.\nText color = color of the label text.</li>\n<li>bcolor : PIL color specification, default is 'white'.\nBackground color = color of the label background/box.</li>\n</ul>\n\n<h6 id=\"technical-notes\">Technical notes</h6>\n\n<ul>\n<li>Transparent background:\nTo set transparent background,\nset optional/keyword argument bcolor='transparent'.\nIt is not enough to omit bcolor,\nbecause all omitted keyword arguments\nare set to their defaults defined in Settings.Label.\nIn the case of omitted bcolor argument, the default is 'white'. </li>\n<li>Color label in grayscale image:\nTo set color label in grayscale image,\nit is necessary to convert image to RGB;\notherwise the colored label would be converted to grayscale.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">label</span>, </span><span class=\"param\"><span class=\"n\">F</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.scalebar", "modulename": "myimg.objects", "qualname": "MyImage.scalebar", "kind": "function", "doc": "<p>Insert a scalebar in the lower right corner of the image.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pixsize</strong> (str):\nDescription how to determine pixel size.\nPixel size is needed to calculate the scalebar length.\nSee <em>Example</em> section below to see available options.</li>\n<li><strong>F</strong> (float, optional, the default is None):\nMultiplication coefficient/factor that changes the scalebar size.\nIf F = 1.2, then all scalebar parameters are enlarged 1.2 times.</li>\n<li><strong>kwargs</strong> (list of keyword arguments):\nAllowed keyword arguments are:\ncolor, bcolor, position, stripes, messages.\nSee section <em>List of allowed kwargs</em> below for more info.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The scalebar is drawn directly to <em>self.img</em>.</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Four basic ways how to insert a scalebar in an image</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (model example; in real life we use just one of the ways</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (0) Import api + read image</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimage.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyImage</span><span class=\"p\">(</span><span class=\"s1\">&#39;../IMG/image123_20kx.bmp&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (1) Pixel size from real width of image = 100um</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">(</span><span class=\"s1\">&#39;rwi,100um&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (2) Pixel size from a known length in image =&gt; 50 nm = 202 pixels</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">(</span><span class=\"s1\">&#39;knl,50nm,202&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (3) Pixel size from known magnification</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (note: this can be done only for calibrated microscope</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (calibrated microscopes =&gt; myimg.settings.MicCalibrations</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (3a) magnification deduced from last part of image name</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (note: mag = everything between last underscore and suffix</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (in this example we have: ../IMG/image123_20kx.bmp =&gt; mag = 20kx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">(</span><span class=\"s1\">&#39;mag,TecnaiVeleta&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (3b) magnification inserted directly</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (note: mag can be something like 20kx, 20k, 20000x, 20000</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">(</span><span class=\"s1\">&#39;mag,TecnaiVeleta,20kx&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (4) Pixel size from accompanying text file</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (note: some microscopes save images + descriptive txt files</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (the format of text file must be described somehow</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (description of text files =&gt; myimg.settings.MicDescriptionFiles</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">(</span><span class=\"s1\">&#39;txt,MAIA3&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n</code></pre>\n</div>\n\n<h6 id=\"list-of-allowed-kwargs\">List of allowed kwargs</h6>\n\n<ul>\n<li>color : PIL color specification, default is 'black'.\nText color = color of the scalebar text and line.</li>\n<li>bcolor : PIL color specification, default is 'white'.\nBackground color = color of the scalebar background/box.</li>\n<li>length : str, default is None.\nIf length is given (using a string such as '100um','1.2nm')\nthen the lenght fixed at given value and not calculated by the\nprogram (calculation would yield some reasonable lenght of\nscalebar around 1/6 of the image width; this default is saved\nin myimg.settings.Scalebar.length property - which can be changed).</li>\n<li>position : list or tuple or None, default is None.\nIf position = None, the scalebar is drawn\nat the default position in the lower-right corner of the image.\nIf position = (X,Y) = list or tuple of two integers,\nthe scalebar is drawn at position X,Y of the image.</li>\n<li>stripes : bool or int, default is False.\nIf stripes = False, draw standard scalebar.\nIf stripes = True or 1, draw scalebar with 5 stripes.\nIf stripes = N, where N>=2, draw striped scalebar with N stripes.</li>\n<li>messages : bool, default is False.\nIf messages=True, print info about program run.</li>\n</ul>\n\n<h6 id=\"technical-notes\">Technical notes</h6>\n\n<ul>\n<li>Transparent background:\nTo set transparent background,\nset optional/keyword argument bcolor='transparent'.\nIt is not enough to omit bcolor,\nbecause all omitted keyword arguments\nare set to their defaults defined in Settings.Scalebar.\nIn the case of omitted bcolor argument, the default is 'white'. </li>\n<li>Color scalebar in grayscale image:\nTo set color label in grayscale image,\nit is necessary to convert image to RGB;\notherwise the colored label would be converted to grayscale.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pixsize</span>, </span><span class=\"param\"><span class=\"n\">F</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.show", "modulename": "myimg.objects", "qualname": "MyImage.show", "kind": "function", "doc": "<p>Show image.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cmap</strong> (matplotlib colormap name, optional, default is None):\nMatplotlib colormap name.\nIf omitted and we have grayscale image, then we use cmap=gray.</li>\n<li><strong>axes</strong> (bool, optional, default is False):\nIf axes=False (default), do not show axes around the image.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The output is the image shown on the screen.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.save", "modulename": "myimg.objects", "qualname": "MyImage.save", "kind": "function", "doc": "<p>Save image using arbitrary output dir, name and extension.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_image</strong> (str or path-like object):\nFilename of the output image.\nThe format of saved image is guessed from the extension.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The output is the saved <em>output_image</em>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">output_image</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.save_with_extension", "modulename": "myimg.objects", "qualname": "MyImage.save_with_extension", "kind": "function", "doc": "<p>Save image in the same dir with slightly modified name and extension.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>my_extension</strong> (str):\nSpecific extension of the output image.\nThe argument my_extension can extend image name\n<ul>\n<li>modify image extension/format;\nsee the example below.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The output is the saved output image with <em>my_extension</em>.</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimage.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Open image</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyImage</span><span class=\"p\">(</span><span class=\"s1\">&#39;../IMG/somefile.bmp&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Cut off lower bar </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">cut</span><span class=\"p\">(</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Save the image as: &#39;../IMG/somefile_cut.png&#39;)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">save_with_ext</span><span class=\"p\">(</span><span class=\"s1\">&#39;_cut.png&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">my_extension</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.Montage", "modulename": "myimg.objects", "qualname": "Montage", "kind": "class", "doc": "<p>Class defining Montage objects.</p>\n\n<ul>\n<li>Montage object = a rectangular multi-image. </li>\n<li>See __init__ for more information about initial object parameters.</li>\n<li>More help: <a href=\"https://mirekslouf.github.io/myimg/docs/pdoc.html/myimg.html\">https://mirekslouf.github.io/myimg/docs/pdoc.html/myimg.html</a></li>\n</ul>\n"}, {"fullname": "myimg.objects.Montage.__init__", "modulename": "myimg.objects", "qualname": "Montage.__init__", "kind": "function", "doc": "<p>Initialize Montage object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>images</strong> (list of images (arrays or str or path-like or MyImage objects)):\nThe list of images from which the montage will be created.\nIf {images} list consists of arrays,\nwe assume that these arrays are the direct input to montage\n(more precisely: the direct input to skimage.util.montage method).\nIf {images} list contains of strings or path-like objects,\nwe assume that these are filenames of images\nthat should be read as arrays.\nIf {images} lists contains MyImage objecs,\nwe use MyImage objects to create the final montage.</li>\n<li><strong>itype</strong> (type of images/arrays ('gray' or 'rgb' or 'rgba')):\nThe type of input/output images/arrays.\nIf itype='gray',\nthen the input/output are converted to grayscale.\nIf itype='rgb' or 'rgba'\nthen the input/output are treated as RGB or RGBA images/arrays.</li>\n<li><strong>grid</strong> (tuple of two integers (number-of-rows, number-of-cols)):\nThis argument is an equivalent of\n<em>grid_shape</em> argument in skimage.util.montage function.\nIt defines the number-of-rows and number-of-cols of the montage.\nNote: If grid is None, it defaults to a suitable square grid.</li>\n<li><strong>padding</strong> (int; the default is 0):\nThis argument is an equivalent of\n<em>padding_width</em> argument in skimage.util.montage function.\nIt defines the distance between the images/arrays of the montage.</li>\n<li><strong>fill</strong> (str or int or tuple/list/array; the default is 'white'):\nThis argument is a (slightly extended) equivalent of \n<em>fill</em> argument in skimage.util.montage function.\nIt defines the color between the images/arrays.\nIf fill='white' or fill='black',\nthe color among the images/arrays is white or black.\nIt can also be an integer value (for grayscale images)\nor a three-value tuple/list/array (for RGB images);\nin such a case, it defines the exact R,G,B color among the images.</li>\n<li><strong>crop</strong> (bool; the default is True):\nIf crop=True, the outer padding is decreased to 1/2*padding.\nThis makes the montages nicer (like the outputs from ImageMagick).</li>\n<li><strong>rescale</strong> (float; the default is None):\nIf <em>rescale</em> is not None, then the original size\nof all input images/arrays is multiplied by <em>rescale</em>.\nExample: If <em>rescale</em>=1/2, then the origina size\nof all input images/arrays is halved (reduced by 50%).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Montage object = multi-image/montage of <em>images</em>.</strong></li>\n<li><strong>The montage object can be shown (Montage.show) or saved (Montage.save).</strong></li>\n</ul>\n\n<h6 id=\"technical-notes\">Technical notes</h6>\n\n<ul>\n<li>Only 'gray', 'rgb', and 'rgba' standard formats are supported.\nIf an image has some non-standard format,\nit can be read and converted using a sister MyImage class\n(methods MyImage.to_gray, MyImage.to_rgb, MyImage.to_rgba).</li>\n<li>The user does not have to differentiate 'rgb' and 'rgba' images.\nIt is enough to specify 'rgb' for color images\nand if the images are 'rgba', the program can work with them.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">images</span>,</span><span class=\"param\">\t<span class=\"n\">itype</span>,</span><span class=\"param\">\t<span class=\"n\">grid</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">fill</span><span class=\"o\">=</span><span class=\"s1\">&#39;white&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">crop</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">rescale</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "myimg.objects.Montage.process_images", "modulename": "myimg.objects", "qualname": "Montage.process_images", "kind": "function", "doc": "<p>Check and prepare images before creating montage.</p>\n\n<ul>\n<li>The images used for montage\nshould be convertible to arrays with the same type and size.</li>\n<li>This method goes through all images in self.images\nand converts them to arrays.</li>\n<li>If the converted images/arrays have the same dimensions(=type),\nthen everything is Ok\nand we cen proceed.</li>\n<li><p>If the conerted images/arrays do not have the same dimension(=type),\nthen this methods ends with an error\nand the user has to adjust images BEFORE calling the montage method.</p>\n\n<p>Returns</p></li>\n</ul>\n\n<hr />\n\n<p>None\n     If everything is Ok,\n     the checked images are read and saved as arrays in the self.images.\n     If the images are not of the same type\n     this method prints an error and the program quits.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.Montage.check_image_types", "modulename": "myimg.objects", "qualname": "Montage.check_image_types", "kind": "function", "doc": "<p>Check image/array types and prepare additional parametrs for montage.</p>\n\n<ul>\n<li>The only allowed image types are 'rgb' and 'gray'.</li>\n<li>Other image types =&gt; print error message and exit program.</li>\n<li>For each image type we have to set two additional montage params:\n<ul>\n<li>self.montage_channel_axis =&gt; the last axis of the array</li>\n<li>self.montage_number_of_channels =&gt; gray ~ 1, rgb ~ 3, rgba ~ 4</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The additional montage parameters are are saved in\nself.montage_channel_axes and self.montage_number_of_channels.\nThese parameters are needed\nfor correct treatement of rgb/gray images/arrays.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.Montage.rescale_images", "modulename": "myimg.objects", "qualname": "Montage.rescale_images", "kind": "function", "doc": "<p>Rescale input images/arrays if requested.</p>\n\n<ul>\n<li>The images are rescaled if self.rescale != None.</li>\n<li>This rescaling should be applied to each of self.images\nAFTER the images have been checked and converted to arrays.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The rescaled images/arrays are saved in self.images.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.Montage.show", "modulename": "myimg.objects", "qualname": "Montage.show", "kind": "function", "doc": "<p>Show image montage.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cmap</strong> (matplotlib colormap name, optional, default is None):\nMatplotlib colormap name.\nIf omitted and we have grayscale image, then we use cmap=gray.</li>\n<li><strong>axes</strong> (bool, optional, default is False):\nIf axes=False (default), do not show axes around the image.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The output is the image montage shown on the screen.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.Montage.save", "modulename": "myimg.objects", "qualname": "Montage.save", "kind": "function", "doc": "<p>Save image montage (using an arbitrary path, name and extension).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_image</strong> (str or path-like object):\nFilename of the output image.\nThe format of saved image is guessed from the extension.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The output is the saved <em>output_image</em>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">output_image</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.Peaks", "modulename": "myimg.objects", "qualname": "Peaks", "kind": "class", "doc": "<p>Class defining Peaks objects.</p>\n\n<ul>\n<li>Peaks object = source image + list-of-its-peaks.</li>\n<li>See __init__ for more information about initial object parameters.</li>\n<li>More help: <a href=\"https://mirekslouf.github.io/myimg/docs/pdoc.html/myimg.html\">https://mirekslouf.github.io/myimg/docs/pdoc.html/myimg.html</a></li>\n</ul>\n"}, {"fullname": "myimg.objects.Peaks.__init__", "modulename": "myimg.objects", "qualname": "Peaks.__init__", "kind": "function", "doc": "<p>Initialize Peaks object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>image</strong> (filename or pillow object):\nDESCRIPTION.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Peaks object.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img_name</span>, </span><span class=\"param\"><span class=\"n\">img_object</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "myimg.objects.Units", "modulename": "myimg.objects", "qualname": "Units", "kind": "class", "doc": "<p>Data class: just a container for the following two dataclasses.</p>\n\n<ul>\n<li>The sub-dataclasses are used in NumberWithUnits/ScaleWithUnits objects.</li>\n<li>The units definitions are fixed, the users should not change them.</li>\n<li>The correct units (Lenghts or RecLenghts) are guessed\nduring NumberWithUnits/ScaleWithUnits object initialization.\nExample: If <code>nwu = NumberWithUnits('2um')</code>, then we use <code>Units.Lenghts</code>.</li>\n</ul>\n"}, {"fullname": "myimg.objects.Units.Lengths", "modulename": "myimg.objects", "qualname": "Units.Lengths", "kind": "class", "doc": "<p>Data class: length units (and their ratios) for micrographs.</p>\n"}, {"fullname": "myimg.objects.Units.RecLengths", "modulename": "myimg.objects", "qualname": "Units.RecLengths", "kind": "class", "doc": "<p>Data class: reciprocal lenght units (and their ratios).</p>\n\n<ul>\n<li>Reminder: reciprocal lenghts are used in diffractograms</li>\n<li>Here: rust a pair of units that are employed in real life: 1/nm, 1/A</li>\n</ul>\n"}, {"fullname": "myimg.objects.NumberWithUnits", "modulename": "myimg.objects", "qualname": "NumberWithUnits", "kind": "class", "doc": "<p>Class defining NumberWithUnits object.</p>\n\n<ul>\n<li>NumberWithUnits object = number + units.</li>\n<li>The numbers-with-units are used for pixel sizes or scalebars.</li>\n</ul>\n\n<p>Object initialiation</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Three basic ways how to initialize a NumberWithUnits object</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">myimg.nwu</span> <span class=\"kn\">import</span> <span class=\"n\">NumberWithUnits</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nwu1</span> <span class=\"o\">=</span> <span class=\"n\">ScaleWithUnits</span><span class=\"p\">(</span><span class=\"s1\">&#39;1.2um&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nwu2</span> <span class=\"o\">=</span> <span class=\"n\">ScaleWithUnits</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"o\">=</span><span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s1\">&#39;um&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nwu3</span> <span class=\"o\">=</span> <span class=\"n\">ScaleWithUnits</span><span class=\"p\">(</span><span class=\"n\">number_with_units_object_such_as_nwu1</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>List of object properties</p>\n\n<ul>\n<li>number = number/numeric value</li>\n<li>units = units corresponding to number</li>\n<li>_units_description = myimg.settings.Units subclass, private property</li>\n</ul>\n\n<p>Object methods</p>\n\n<ul>\n<li>text = return number-with-units as string</li>\n<li>units_Ok = test if the defined units are correct</li>\n<li>index_of_units = index of units in units_description.units list</li>\n<li>increase_units = increase units and modify number accordingly</li>\n<li>decrease_units = decrease units and modify number accordingly</li>\n<li>set_units_to = set units to given units and modify number accordingly</li>\n<li>set_correct_units = set units so that the number was within &lt;1,1000)</li>\n</ul>\n"}, {"fullname": "myimg.objects.NumberWithUnits.__init__", "modulename": "myimg.objects", "qualname": "NumberWithUnits.__init__", "kind": "function", "doc": "<p>Initialize NumberWithUnits object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>number</strong> (float or str or NumberWithUnits object):\nNumber with (or without) units, which can be:\n(i) Number (float; such as: 100),\nbut then the 2nd argument should be given (such as units='um'). \n(ii) String (str; such as: '100 um' or '1.2nm').\n(iii) Another NumberWithUnits object;\nin such a case we receive the copy of the argument.</li>\n<li><strong>units</strong> (str, optional, the default is None):\nIf the 1st argument (number) is a float, the 2nd argument (units)\ndefines units of the first argument.\nIf the 1st argument is string or NumberWithUnits object,\nthe 2nd argument is ignored.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>NumberWithUnits object</strong>: NumberWithUnits object contains:\n(i) numerical value (NumberWithUnits.number),\n(ii) corresponding units (NumberWithUnits.units), and\n(iii) further props/methods (NumberWithUnits.change_units ...).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">number</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">units</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "myimg.objects.NumberWithUnits.text", "modulename": "myimg.objects", "qualname": "NumberWithUnits.text", "kind": "function", "doc": "<p>Return number + units as string.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong> (number-with-units):\nThe method returns the saved number with units as string.\nExample: if self.number = 1.2 and self.units = nm, we get '1 nm'.\nThe units are printed in unicode (important for um and agstrems).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.NumberWithUnits.units_Ok", "modulename": "myimg.objects", "qualname": "NumberWithUnits.units_Ok", "kind": "function", "doc": "<p>Test if current units are correct.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>units</strong> (str, optional, the default is None):\nIf units='something', then 'something' is compared\nwith the list of allowed units for self = NumberWithUnits object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if the units are correct and False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">units</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.NumberWithUnits.index_of_units", "modulename": "myimg.objects", "qualname": "NumberWithUnits.index_of_units", "kind": "function", "doc": "<p>Get index of current or specified units.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>units_to_check</strong> (str, optional, default is None):\nAny string representing some units.\nIf units_to_check is not given,\nthe method check current units of self object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: Index of current or specified units.\nIf units = 'um' then index_of_units = 2,\nbecause Units.Lenghts.units = ('m', 'mm', 'um', 'nm', 'A'),\nwhich means: 'm' =&gt; 0, 'mm' =&gt; 1, 'um' =&gt; 2...</li>\n</ul>\n\n<h6 id=\"note\">Note</h6>\n\n<p>This function is employed in further functions\nmanipulating with units, such as increase_units, decrease_units...</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">units_to_check</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.NumberWithUnits.increase_units", "modulename": "myimg.objects", "qualname": "NumberWithUnits.increase_units", "kind": "function", "doc": "<p>Increase current units (for example: um -> mm).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The result is saved in NumberWithUnits object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.NumberWithUnits.decrease_units", "modulename": "myimg.objects", "qualname": "NumberWithUnits.decrease_units", "kind": "function", "doc": "<p>Decrease current units (for example: um -> nm).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The result is saved in NumberWithUnits object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.NumberWithUnits.set_units_to", "modulename": "myimg.objects", "qualname": "NumberWithUnits.set_units_to", "kind": "function", "doc": "<p>Set units to <em>target_units</em> and modify number accordingly.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>target_units</strong> (str):\nAny string specifying valid units.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The results = changed units (and correspondingly changed number)\nare saved in NumberWithUnits object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">target_units</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.NumberWithUnits.set_correct_units", "modulename": "myimg.objects", "qualname": "NumberWithUnits.set_correct_units", "kind": "function", "doc": "<p>Set correct units, so that the number was between 1 and 1000.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The result is saved in NumberWithUnits object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.ScaleWithUnits", "modulename": "myimg.objects", "qualname": "ScaleWithUnits", "kind": "class", "doc": "<p>Class defining ScaleWithUnits object.</p>\n\n<ul>\n<li>ScaleWithUnits object = number + units + pixels.</li>\n<li>The objet defines a scalebar:\nits lenght (number,units) and length-in-pixels (pixels).</li>\n</ul>\n\n<p>Object initialiation</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Three basic ways how to initialize a ScaleWithUnits object</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">myimg.nwu</span> <span class=\"kn\">import</span> <span class=\"n\">ScaleWithUnits</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">swu1</span> <span class=\"o\">=</span> <span class=\"n\">ScaleWithUnits</span><span class=\"p\">(</span><span class=\"s1\">&#39;1.2um&#39;</span><span class=\"p\">,</span> <span class=\"n\">pixels</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">swu2</span> <span class=\"o\">=</span> <span class=\"n\">ScaleWithUnits</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"o\">=</span><span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s1\">&#39;um&#39;</span><span class=\"p\">,</span> <span class=\"n\">pixels</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">swu3</span> <span class=\"o\">=</span> <span class=\"n\">ScaleWithUnits</span><span class=\"p\">(</span><span class=\"n\">number_with_units_object</span><span class=\"p\">,</span> <span class=\"n\">pixels</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>List of object properties</p>\n\n<ul>\n<li>number = number/numeric value</li>\n<li>units  = units corresponding to number</li>\n<li>pixels = pixels corresponding to number-with-units</li>\n<li>_units_description: myimg.settings.Units subclass, private property</li>\n</ul>\n\n<p>Object methods</p>\n\n<ul>\n<li>inherited methods from myimg.nwu.NumberWithUnits</li>\n<li>adjust_lenght_to = adjust lenght in pixels and modify number accordingly</li>\n<li>adjust_scalebar_size = adjusts scalebar lenght to some reasonable size</li>\n</ul>\n", "bases": "NumberWithUnits"}, {"fullname": "myimg.objects.ScaleWithUnits.__init__", "modulename": "myimg.objects", "qualname": "ScaleWithUnits.__init__", "kind": "function", "doc": "<p>Initialize ScaleWithUnits object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>number</strong> (float or str or NumberWithUnits object):\nNumber with (or without) units, which can be:\n(i) Number (float; such as: 100),\nbut then the 2nd argument should be given (such as units='um'). \n(ii) String (str; such as: '100 um' or '1.2nm').\n(iii) Another NumberWithUnits object;\nin such a case we receive the copy of the argument.</li>\n<li><strong>units</strong> (str, optional, the default is None):\nIf the 1st argument (number) is a float, the 2nd argument (units)\ndefines units of the first argument.\nIf the 1st argument is string or NumberWithUnits object,\nthe 2nd argument is ignored.</li>\n<li><strong>pixels</strong> (float):\nLength of scalebar in pixels.\nThis is a keyword argument that is formally optional, but in fact \nit must be specified so that the initialization made sense.\nMoreover, this argument must be specified as keyword argument,\nbecause the 2nd argument (units) is really optional and\nit may not be clear, which argument is which.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ScaleWithUnits object</strong>: NumberWithUnits object contains:\n(i) numerical value (NumberWithUnits.number),\n(ii) corresponding units (NumberWithUnits.units),\n(iii) length-of-scalebar-in-pixels and\n(iv) further props/methods (most of which\nare inherited from NumberWithUnits superclass).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">number</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">units</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">pixels</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "myimg.objects.ScaleWithUnits.text", "modulename": "myimg.objects", "qualname": "ScaleWithUnits.text", "kind": "function", "doc": "<p>Return number-with-units as string (ignoring pixels).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong> (number-with-units):\nThe method returns the saved number with units as string.\nExample: if self.number = 1.2 and self.units = nm, we get '1 nm'.\nThe units are printed in unicode (important for um and agstrems).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.ScaleWithUnits.adjust_length_to", "modulename": "myimg.objects", "qualname": "ScaleWithUnits.adjust_length_to", "kind": "function", "doc": "<p>Set lenght-of-scalebar to <em>n</em> and modify lenght-in-pixels accordingly.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n</strong> (float):\nThe new length-of-scalebar (= self.number).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The new lenght-of-scalebar and lenght-of-scalebar-in-pixels\nare saved in ScaleWithUnits.number and ScaleWithUnits.pixels\nproperties, respectively.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.ScaleWithUnits.adjust_scalebar_size", "modulename": "myimg.objects", "qualname": "ScaleWithUnits.adjust_scalebar_size", "kind": "function", "doc": "<p>Set scalebar to some reasonable lenght\nand modify lenght-in-pixels accordingly.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The modified (number, units, and pixels) are saved in\nScaleWithUnits object.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<ul>\n<li>swu = 0.3 um =&gt; swu.adjust_scalebar_size() =&gt; 300 nm</li>\n<li>swu = 2.3 um =&gt; swu.adjust_scalebar_size() =&gt; 2 um</li>\n<li>swu = 456 um =&gt; swu.adjust_scalebar_size() =&gt; 500 um</li>\n<li>swu = 888 um =&gt; swu.adjust_scalebar_size() =&gt; 1 mm</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.settings", "modulename": "myimg.settings", "kind": "module", "doc": "<h2 id=\"module-myimgsettings\">Module: myimg.settings</h2>\n\n<p>Data module with default settings and calibrations for package myimg.</p>\n\n<p>The module contains several dataclasess:</p>\n\n<ul>\n<li>myimg.settings.Scalebar\n= default parameters for drawing of scalebars</li>\n<li>myimg.settings.Label\n= default parameters for drawing of image labels</li>\n<li>myimg.settings.MicCalibrations\n= class contaning the microscope calibrations</li>\n<li>myimg.settings.MicDescriptionFiles\n= class describing the microscope description files</li>\n</ul>\n"}, {"fullname": "myimg.settings.Scalebar", "modulename": "myimg.settings", "qualname": "Scalebar", "kind": "class", "doc": "<p>Default parameters of scalebars (dimensions, font, ...).</p>\n\n<ul>\n<li>most dimensions in this section = fractions of image height</li>\n<li>only default/precalculated lenght of scalebar = 1/6 * image_width</li>\n<li>default/precalculated position = lower-right corner (if position=None)</li>\n</ul>\n"}, {"fullname": "myimg.settings.Label", "modulename": "myimg.settings", "qualname": "Label", "kind": "class", "doc": "<p>Default parameters of image labels (dimensions, font, ...).</p>\n\n<ul>\n<li>all dimensions in this section = multiples of image height</li>\n<li>the default font size is similar as in the case of Scalebar</li>\n</ul>\n"}, {"fullname": "myimg.settings.MicCalibrations", "modulename": "myimg.settings", "qualname": "MicCalibrations", "kind": "class", "doc": "<p>Microscope calibration constants.</p>\n\n<ul>\n<li>This dataclass is a container for several sub-dataclasses.</li>\n<li>The subdataclasses define the individual calibrated microscopes.</li>\n</ul>\n\n<p>Calculation of calibration constant for given microscope</p>\n\n<ul>\n<li>mag   = magnification, for which we know rwi</li>\n<li>rwi   = real width of image (in our case given in [mm]</li>\n<li>const = calibration constant = rwi * mag</li>\n</ul>\n\n<p>Usage of calibration constants</p>\n\n<ul>\n<li>rwi at given mag: rwi = const/mag (const = calibration constant)</li>\n<li>Warning: for EM microscopes, these relations may be just approximate</li>\n</ul>\n\n<p>Justification</p>\n\n<ul>\n<li>2x higher mag =&gt; 2x lower rwi</li>\n<li>4x higher mag =&gt; 4x lower rwi</li>\n<li>Therefore (according to elementary logic)\n<ul>\n<li>rwi = some_constant/mag</li>\n<li>const = some_constant = calibration_constant = rwi * mag</li>\n<li>physical meaning of calibration const:\nfor given microscope, const = rwi of image at mag=1x</li>\n</ul></li>\n</ul>\n\n<p>Usage of this dataclass =&gt; subclasses of this dataclass</p>\n\n<ul>\n<li>This dataclass is usually not used directly.</li>\n<li>The data are employed within the myimg package.</li>\n<li><p>Nevertheless, a short example follows:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimg.settings</span> <span class=\"k\">as</span> <span class=\"nn\">Settings</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Settings</span><span class=\"o\">.</span><span class=\"n\">MicCalibrations</span><span class=\"o\">.</span><span class=\"n\">TecnaiVeleta</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"p\">)</span>\n</code></pre>\n</div></li>\n</ul>\n"}, {"fullname": "myimg.settings.MicCalibrations.TecnaiVeleta", "modulename": "myimg.settings", "qualname": "MicCalibrations.TecnaiVeleta", "kind": "class", "doc": "<p>Calibration of Tecnai microscope with Veleta camera.</p>\n\n<ul>\n<li>Typical image size = [1024x1024]pix</li>\n<li>Alternative image sizes = integer multiples possible due to binning.</li>\n<li>Binning does not influence real-width-of-image and calibration const.</li>\n</ul>\n"}, {"fullname": "myimg.settings.MicCalibrations.LM_Nikon1", "modulename": "myimg.settings", "qualname": "MicCalibrations.LM_Nikon1", "kind": "class", "doc": "<p>Calibration of Nikon microscope with ProgRes camera.</p>\n\n<ul>\n<li>Typical image size = [1024x768]pix</li>\n<li>Alternative image sizes = integer multiples possible due to binning.</li>\n<li>Binning does not influence real-width-of-image and calibration const.</li>\n</ul>\n"}, {"fullname": "myimg.settings.MicCalibrations.LM_Nikon2", "modulename": "myimg.settings", "qualname": "MicCalibrations.LM_Nikon2", "kind": "class", "doc": "<p>Calibration of Nikon microscope with Basler camera.</p>\n\n<ul>\n<li>Typical image sizes = [2464x2056]pix, [1232x1028]pix ...</li>\n<li>Alternative image sizes = integer multiples possible due to binning.</li>\n<li>Binning does not influence real-width-of-image and calibration const.</li>\n</ul>\n"}, {"fullname": "myimg.settings.MicDescriptionFiles", "modulename": "myimg.settings", "qualname": "MicDescriptionFiles", "kind": "class", "doc": "<p>Microscope description files.</p>\n\n<ul>\n<li>Some microscopes yield micrographs <em>with</em> text description files.</li>\n<li>The description file contains additional info about the micrograph.\n<ul>\n<li>the filename is usually similar to the micrograph/image file</li>\n<li>the description file contains information about the pixel size</li>\n<li>therefore, a description file can be used\nfor the micrograph calibration</li>\n</ul></li>\n</ul>\n"}, {"fullname": "myimg.settings.MicDescriptionFiles.MAIA", "modulename": "myimg.settings", "qualname": "MicDescriptionFiles.MAIA", "kind": "class", "doc": "<p>Desription files produced by an SEM microscope MAIA.</p>\n"}, {"fullname": "myimg.settings.MicDescriptionFiles.VEGA", "modulename": "myimg.settings", "qualname": "MicDescriptionFiles.VEGA", "kind": "class", "doc": "<p>Description files produced by an SEM microscope VEGA.</p>\n"}, {"fullname": "myimg.settings.MicDescriptionFiles.JEOL", "modulename": "myimg.settings", "qualname": "MicDescriptionFiles.JEOL", "kind": "class", "doc": "<p>Description files produced by an SEM microscope JEOL.</p>\n"}, {"fullname": "myimg.utils", "modulename": "myimg.utils", "kind": "module", "doc": "<h2 id=\"subpackage-myimgutils\">Subpackage myimg.utils</h2>\n\n<p>The subpackage contains various utilities in for package myutils:</p>\n\n<ul>\n<li>myimg.utils.fft = Fourier transform utilities - TODO</li>\n<li>myimg.utils.label = draw a label in the upper left corner of an image</li>\n<li>myimg.utils.scalebar = draw a scalebar in a micrograph (or diffractogram)</li>\n</ul>\n"}, {"fullname": "myimg.utils.fft", "modulename": "myimg.utils.fft", "kind": "module", "doc": "<h2 id=\"module-myimgutilsfft\">Module: myimg.utils.fft</h2>\n\n<p>Fourier transform utilities for package myimg.</p>\n"}, {"fullname": "myimg.utils.fft.fft", "modulename": "myimg.utils.fft", "qualname": "fft", "kind": "class", "doc": "<p>Not implemented yet ...</p>\n"}, {"fullname": "myimg.utils.label", "modulename": "myimg.utils.label", "kind": "module", "doc": "<h2 id=\"module-myimgutilslabel\">Module: myimg.utils.label</h2>\n\n<p>This module defines function insert_label, with the following features:</p>\n\n<ul>\n<li>The function inserts a label to the upper left corner of an image.</li>\n<li>The function is in this separated module as it is a bit longer.</li>\n<li>The function is usually not called directly, but through myimg.api:</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Inserting scalebar using myimg.api interface</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimage.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyImage</span><span class=\"p\">(</span><span class=\"s1\">&#39;somefile.bmp&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># img.label calls our myimg.utils.label.insert_label function</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">save_with_ext</span><span class=\"p\">(</span><span class=\"s1\">&#39;_l.png&#39;</span><span class=\"p\">)</span> \n</code></pre>\n</div>\n\n<p>Notes to documentation:</p>\n\n<ul>\n<li>The function <em>insert_label</em> in this module does not have a docstring,\nas it is not called directly. </li>\n<li>The docstring with detailed description of all parameters can be found\nin the calling myimg.api.MyImage.label method.\n(the usage of the label method is shown in the example above).</li>\n</ul>\n"}, {"fullname": "myimg.utils.scalebar", "modulename": "myimg.utils.scalebar", "kind": "module", "doc": "<h2 id=\"module-myimgutilsscalebar\">Module: myimg.utils.scalebar</h2>\n\n<p>This module defines function insert_scalebar, with the following features:</p>\n\n<ul>\n<li>The function inserts a scalebar into a micrograph (or diffractogram).</li>\n<li>The function employs many auxiliary functions defined this module.</li>\n<li>The function is usually not called directly, but through myimg.api:</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Inserting scalebar using myimg.api interface</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimage.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyImage</span><span class=\"p\">(</span><span class=\"s1\">&#39;somefile.bmp&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># img.scalebar calls our myimg.utils.scalebar.insert_scalebar function</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">(</span><span class=\"s1\">&#39;rwi,100um&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">save_with_ext</span><span class=\"p\">(</span><span class=\"s1\">&#39;_clm.png&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Documentation of the functions in this module:</p>\n\n<ul>\n<li>The functions do not have doctstings as they are not used directly.</li>\n<li>Nevertheless, the functions are reasonably documented in the source code.</li>\n<li>In pdoc-generated-HTML, click <em>View source code</em> to get the commented code.</li>\n</ul>\n\n<p>For documentation of <em>insert_scalebar</em> function in this module, see docs\nof the calling myimg.api.MyImage.scalebar method\n(the usaage of the scalebar method is shown in the example above).</p>\n"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();