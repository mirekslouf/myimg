window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "myimg", "modulename": "myimg", "kind": "module", "doc": "<h2 id=\"package-myimg\">Package: MyImg</h2>\n\n<p>A toolbox for the processing of micrographs, which can do the following:</p>\n\n<ol>\n<li>Process single micrographs (improve contrast, insert scalebars, etc.).</li>\n<li>Prepare nice, publication-ready tiled images from processed micrographs.</li>\n<li>Apply additional tools, such as: FFT, distributions, immunolabelling ...</li>\n</ol>\n\n<p>See myimg.api for a simple user interface.</p>\n\n<p>List of key objects, modules, and sub-packages:</p>\n\n<ul>\n<li>myimg.api = simple user interface, basic point to start</li>\n<li>myimg.objects = key objects used by myimg\n<ul>\n<li>myimg.objects.MyImage = single micrographs</li>\n<li>myimg.objects.MyReport = multi-images = tiled images</li>\n</ul></li>\n<li>myimg.settings = default settings employed by MyImg objects</li>\n<li>myimg.apps = sub-package containing additional tools and/or applications\n<ul>\n<li>myimg.api.Apps = practical access to additional applications</li>\n<li>myimg.api.Apps.FFT = sample additional application = Fourier transform</li>\n</ul></li>\n<li>myimg.utils = sub-package with code for specific/more complex utils in myimg</li>\n</ul>\n"}, {"fullname": "myimg.api", "modulename": "myimg.api", "kind": "module", "doc": "<h2 id=\"module-myimgapi\">Module: myimg.api</h2>\n\n<p>A simple interface to MyImg package.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Simple usage of myimg.api interface</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimg.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (1) Open image</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyImage</span><span class=\"p\">(</span><span class=\"s1\">&#39;somefile.bmp&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># input image: somefile.bmp</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (2) Modify the image </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">cut</span><span class=\"p\">(</span><span class=\"mi\">60</span><span class=\"p\">)</span>                <span class=\"c1\"># cut off lower bar (60 pixels)             </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span>             <span class=\"c1\"># label to the upper-left corner</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">(</span><span class=\"s1\">&#39;rwi,100um&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># scalebar to the lower-right corner</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (3) Save the modified image </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">save_with_ext</span><span class=\"p\">(</span><span class=\"s1\">&#39;_ls.png&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># output: somefile_ls.png</span>\n</code></pre>\n</div>\n\n<p>More examples are spread all over the documentation.</p>\n\n<ol>\n<li>How to use myimg.objects:\n<ul>\n<li>myimg.api.MyImage = single image = an image with additional methods</li>\n<li>myimg.api.MyReport = multi-image = a rectangular grid of images</li>\n</ul></li>\n<li>MyImage objects - frequent methods:\n<ul>\n<li>myimg.objects.MyImage.scalebar = a method to insert scalebar</li>\n<li>myimg.objects.MyImage.caption = a method to add figure caption</li>\n<li>myimg.objects.MyImage.label = a method to insert label in the corner</li>\n</ul></li>\n<li>MyImage objects - additional applications:\n<ul>\n<li>myimg.api.Apps = class for adding additional utils/apps to MyImage</li>\n<li>myimg.api.Apps.FFT = an example of one utility = Fourier transform</li>\n</ul></li>\n<li>Additional utilities and applications:\n<ul>\n<li>myimg.plots = sub-package with auxiliary functions for plotting</li>\n<li>myimg.utils = sub-package with code for specific/more complex methods</li>\n<li>myimg.apps = sub-package with code for additional applications</li>\n<li>myimg.apps.iLabels = app for immunolabelling\n(detection, classification, collocalization)</li>\n</ul></li>\n</ol>\n"}, {"fullname": "myimg.api.MyImage", "modulename": "myimg.api", "qualname": "MyImage", "kind": "class", "doc": "<p>Class providing MyImage objects.</p>\n\n<ul>\n<li>MyImage object = PIL-image-object + additional attributes and methods.</li>\n<li>This class in api module (myimg.api.MyImage)\nis just inherited from objects module (myimg.objects.MyImage).</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimg.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>        <span class=\"c1\"># standard import of MyImg package</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyImage</span><span class=\"p\">(</span><span class=\"s1\">&#39;some.png&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># open some image</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>                    <span class=\"c1\"># show the image</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong> (image (array or str or path-like or MyImage object)):\nName of the array/image that we want to open.</li>\n<li><strong>pixsize</strong> (str, optional, default is None):\nDescription how to determine pixel size.\nPixel size is needed to calculate the scalebar length.\nSee docs of myimg.objects.MyImage.scalebar for more details.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MyImage object</strong>: An image, which can be\nadjusted (MyImage.autocontrast, MyImage.border ...),\nprocessed (MyImage.label, MyImage.caption, MyImage.scalebar ...),\nshown (MyImage.show)\nor saved (MyImage.save, MyImage.save_with_extension).</li>\n</ul>\n", "bases": "myimg.objects.MyImage"}, {"fullname": "myimg.api.MyReport", "modulename": "myimg.api", "qualname": "MyReport", "kind": "class", "doc": "<p>Class providing MyReport objects.</p>\n\n<ul>\n<li>MyReport object = a rectangular multi-image.</li>\n<li>This class in api module (myimg.api.MyReport)\nis just inherited from objects module (myimg.objects.MyReport).</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Simple usage of MyReport object</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimg.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Define input images    </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">images</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;s1.png&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;s2.png&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Combine the images into one multi-image = mreport</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mrep</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyReport</span><span class=\"p\">(</span><span class=\"n\">images</span><span class=\"p\">,</span> <span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Save the final multi-image               </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mrep</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">&#39;mreport.png&#39;</span><span class=\"p\">)</span>   \n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>images</strong> (list of images (arrays or str or path-like or MyImage objects)):\nThe list of images from which the MyReport will be created.\nIf {images} list consists of arrays,\nwe assume that these arrays are the direct input to\nskimage.util.montage method.\nIf {images} list contains of strings or path-like objects,\nwe assume that these are filenames of images\nthat should be read as arrays.\nIf {images} lists contains MyImage objecs,\nwe use MyImage objects to create the final MyReport/montage.</li>\n<li><strong>itype</strong> (type of images/arrays ('gray' or 'rgb' or 'rgba')):\nThe type of input/output images/arrays.\nIf itype='gray',\nthen the input/output are converted to grayscale.\nIf itype='rgb' or 'rgba'\nthen the input/output are treated as RGB or RGBA images/arrays.</li>\n<li><strong>grid</strong> (tuple of two integers (number-of-rows, number-of-cols)):\nThis argument is an equivalent of\n<em>grid_shape</em> argument in skimage.util.montage function.\nIt defines the number-of-rows and number-of-cols of the montage.\nNote: If grid is None, it defaults to a suitable square grid.</li>\n<li><strong>padding</strong> (int; the default is 0):\nThis argument is an equivalent of\n<em>padding_width</em> argument in skimage.util.montage function.\nIt defines the distance between the images/arrays of the montage.</li>\n<li><strong>fill</strong> (str or int or tuple/list/array; the default is 'white'):\nThis argument is a (slightly extended) equivalent of \n<em>fill</em> argument in skimage.util.montage function.\nIt defines the color between the images/arrays.\nIf fill='white' or fill='black',\nthe color among the images/arrays is white or black.\nIt can also be an integer value (for grayscale images)\nor a three-value tuple/list/array (for RGB images);\nin such a case, it defines the exact R,G,B color among the images.</li>\n<li><strong>crop</strong> (bool; the default is True):\nIf crop=True, the outer padding is decreased to 1/2*padding.\nThis makes the montages nicer (like the outputs from ImageMagick).</li>\n<li><strong>rescale</strong> (float; the default is None):\nIf <em>rescale</em> is not None, then the original size\nof all input images/arrays is multiplied by <em>rescale</em>.\nExample: If <em>rescale</em>=1/2, then the origina size\nof all input images/arrays is halved (reduced by 50%).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MyReport object</strong>: Multi-image = tiled image composed of <em>images</em>.\nMyReport object can be shown (MyReport.show) or saved (MyReport.save).</li>\n</ul>\n\n<h6 id=\"allowed-image-formats\">Allowed image formats</h6>\n\n<ul>\n<li>Only 'gray', 'rgb', and 'rgba' standard formats are supported.\nIf an image has some non-standard format,\nit can be read and converted using a sister MyImage class\n(methods MyImage.to_gray, MyImage.to_rgb, MyImage.to_rgba).</li>\n<li>The user does not have to differentiate 'rgb' and 'rgba' images.\nIt is enough to specify 'rgb' for color images\nand if the images are 'rgba', the program can handle them.</li>\n</ul>\n", "bases": "myimg.objects.MyReport"}, {"fullname": "myimg.api.Apps", "modulename": "myimg.api", "qualname": "Apps", "kind": "class", "doc": "<p>Additional applications for MyImg package.</p>\n\n<ul>\n<li>Additional features/apps can be added using this myimg.api.Apps class.</li>\n<li>More help and examples can be found in the available applications below.</li>\n<li>Links to available apps: myimg.api.Apps.FFT, myimg.api.Apps.iLabels ...</li>\n</ul>\n"}, {"fullname": "myimg.api.Apps.FFT", "modulename": "myimg.api", "qualname": "Apps.FFT", "kind": "class", "doc": "<p>Class providing FFT objects.</p>\n\n<ul>\n<li>FFT object = Fast Fourier Transform of an image/array.</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Simple usage of FFT objects</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimg.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>        <span class=\"c1\"># standard import of myimg</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyImage</span><span class=\"p\">(</span><span class=\"s1\">&#39;some.png&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># open an image using myimg.api</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fft</span> <span class=\"o\">=</span> <span class=\"n\">my</span><span class=\"o\">.</span><span class=\"n\">Apps</span><span class=\"o\">.</span><span class=\"n\">FFT</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>        <span class=\"c1\"># calculate FFT of the img object</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fft</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;magma&#39;</span><span class=\"p\">)</span>        <span class=\"c1\"># show the result</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong> (image (array or str or path-like or MyImage object)):\nThe 2D object, from which we will calculate FFT\n= 2D-DFFT = 2D discrete fast Fourier transform.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>FFT object.</strong></li>\n</ul>\n\n<h6 id=\"technical-details\">Technical details</h6>\n\n<ul>\n<li>FFT object, 3 basic attributes: FFT.fft (array of complex numbers),\nFFT.intensity (array of intensities = magnitudes = real numbers)\nand FFT.phase (array of phases = angles in range -pi:pi).</li>\n<li>FFT object is pre-processed in the sense that the intensity center\nis shifted to the center of the array (using scipy.fftpack.fftshift).</li>\n<li>FFT object carries the information about calibration (pixel-size),\non condition it was created from MyImage object (the typical case).</li>\n</ul>\n", "bases": "myimg.apps.fft.FFT"}, {"fullname": "myimg.api.Apps.RadialProfile", "modulename": "myimg.api", "qualname": "Apps.RadialProfile", "kind": "class", "doc": "<p>Class defining <em>RadialProfile</em> object.</p>\n", "bases": "myimg.apps.profiles.RadialProfile"}, {"fullname": "myimg.api.Settings", "modulename": "myimg.api", "qualname": "Settings", "kind": "class", "doc": "<p>Settings for myimg package.</p>\n\n<ul>\n<li>This class (myimg.Settings)\nimports all dataclasses from myimg.settings.</li>\n<li>Thanks to this import, we can use Settings myimg.api as follows:</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Sample usage of Settings class</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (this is NOT a typical usage of Settings dataclasses</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (the settings are usually not changed and just used in myimg funcs</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimg.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">Settings</span><span class=\"o\">.</span><span class=\"n\">Scalebar</span><span class=\"o\">.</span><span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">650</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "myimg.api.Settings.Scalebar", "modulename": "myimg.api", "qualname": "Settings.Scalebar", "kind": "class", "doc": "<p>Default parameters of scalebars (dimensions, font, ...).</p>\n\n<ul>\n<li>most dimensions in this section = fractions of image height</li>\n<li>only default/precalculated lenght of scalebar = 1/6 * image_width</li>\n<li>default/precalculated position = lower-right corner (if position=None)</li>\n</ul>\n"}, {"fullname": "myimg.api.Settings.Label", "modulename": "myimg.api", "qualname": "Settings.Label", "kind": "class", "doc": "<p>Default parameters of image labels (dimensions, font, ...).</p>\n\n<ul>\n<li>all dimensions in this section = multiples of image height</li>\n<li>the default font size is similar as in the case of Scalebar</li>\n</ul>\n"}, {"fullname": "myimg.api.Settings.Caption", "modulename": "myimg.api", "qualname": "Settings.Caption", "kind": "class", "doc": "<p>Default parameters of image Captions (dimensions, font, ...).</p>\n\n<ul>\n<li>all dimensions in this section = multiples of image height</li>\n<li>the default font size is similar as in the case of Scalebar</li>\n</ul>\n"}, {"fullname": "myimg.api.Settings.MicCalibrations", "modulename": "myimg.api", "qualname": "Settings.MicCalibrations", "kind": "class", "doc": "<p>Microscope calibration constants.</p>\n\n<ul>\n<li>This dataclass is a container for several sub-dataclasses.</li>\n<li>The subdataclasses define the individual calibrated microscopes.</li>\n</ul>\n\n<p>Calculation of calibration constant for given microscope</p>\n\n<ul>\n<li>mag   = magnification, for which we know rwi</li>\n<li>rwi   = real width of image (in our case given in [mm]</li>\n<li>const = calibration constant = rwi * mag</li>\n</ul>\n\n<p>Usage of calibration constants</p>\n\n<ul>\n<li>rwi at given mag: rwi = const/mag (const = calibration constant)</li>\n<li>Warning: for EM microscopes, these relations may be just approximate</li>\n</ul>\n\n<p>Justification</p>\n\n<ul>\n<li>2x higher mag =&gt; 2x lower rwi</li>\n<li>4x higher mag =&gt; 4x lower rwi</li>\n<li>Therefore (according to elementary logic)\n<ul>\n<li>rwi = some_constant/mag</li>\n<li>const = some_constant = calibration_constant = rwi * mag</li>\n<li>physical meaning of calibration const:\nfor given microscope, const = rwi of image at mag=1x</li>\n</ul></li>\n</ul>\n\n<p>Usage of this dataclass =&gt; subclasses of this dataclass</p>\n\n<ul>\n<li>This dataclass is usually not used directly.</li>\n<li>The data are employed within the myimg package.</li>\n<li><p>Nevertheless, a short example follows:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimg.settings</span> <span class=\"k\">as</span> <span class=\"nn\">Settings</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Settings</span><span class=\"o\">.</span><span class=\"n\">MicCalibrations</span><span class=\"o\">.</span><span class=\"n\">TecnaiVeleta</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"p\">)</span>\n</code></pre>\n</div></li>\n</ul>\n"}, {"fullname": "myimg.api.Settings.MicDescriptionFiles", "modulename": "myimg.api", "qualname": "Settings.MicDescriptionFiles", "kind": "class", "doc": "<p>Microscope description files.</p>\n\n<ul>\n<li>Some microscopes yield micrographs <em>with</em> text description files.</li>\n<li>The description file contains additional info about the micrograph.\n<ul>\n<li>the filename is usually similar to the micrograph/image file</li>\n<li>the description file contains information about the pixel size</li>\n<li>therefore, a description file can be used\nfor the micrograph calibration</li>\n</ul></li>\n</ul>\n"}, {"fullname": "myimg.apps", "modulename": "myimg.apps", "kind": "module", "doc": "<p>Created on Wed Apr 30 11:18:32 2025</p>\n\n<p>@author: p-sik</p>\n"}, {"fullname": "myimg.apps.fft", "modulename": "myimg.apps.fft", "kind": "module", "doc": "<h2 id=\"module-myimgappsfft\">Module: myimg.apps.fft</h2>\n\n<p>Fourier transform utilities for package myimg.</p>\n"}, {"fullname": "myimg.apps.fft.FFT", "modulename": "myimg.apps.fft", "qualname": "FFT", "kind": "class", "doc": "<p>Class defining FFT object.</p>\n"}, {"fullname": "myimg.apps.fft.FFT.__init__", "modulename": "myimg.apps.fft", "qualname": "FFT.__init__", "kind": "function", "doc": "<p>Initialize FFT object.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Simple usage of FFT objects</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimg.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>        <span class=\"c1\"># standard import of myimg</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyImage</span><span class=\"p\">(</span><span class=\"s1\">&#39;some.png&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># open an image using myimg.api</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fft</span> <span class=\"o\">=</span> <span class=\"n\">my</span><span class=\"o\">.</span><span class=\"n\">Apps</span><span class=\"o\">.</span><span class=\"n\">FFT</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>        <span class=\"c1\"># calculate FFT of the img object</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fft</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;magma&#39;</span><span class=\"p\">)</span>        <span class=\"c1\"># show the result</span>\n</code></pre>\n</div>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong> (image (array or str or path-like or MyImage object)):\nThe 2D object, from which we will calculate FFT\n= 2D-DFFT = 2D discrete fast Fourier transform.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>FFT object.</strong></li>\n</ul>\n\n<h6 id=\"technical-details\">Technical details</h6>\n\n<ul>\n<li>FFT object, 3 basic attributes: FFT.fft (array of complex numbers),\nFFT.intensity (array of intensities = magnitudes = real numbers)\nand FFT.phase (array of phases = angles in range -pi:pi).</li>\n<li>FFT object is pre-processed in the sense that the intensity center\nis shifted to the center of the array (using scipy.fftpack.fftshift).</li>\n<li>FFT object carries the information about calibration (pixel-size),\non condition it was created from MyImage object (the typical case).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span></span>)</span>"}, {"fullname": "myimg.apps.fft.FFT.normalize", "modulename": "myimg.apps.fft", "qualname": "FFT.normalize", "kind": "function", "doc": "<p>Normalize results of fft calculation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>what</strong> (str, optional, default is 'intensity'):\nWhat result should be normalized - 'intensity' or 'phase'.\nIntensity normalization = from arbitrary scale to given itype.\nPhase normalization = from (-pi:pi) to (0:2*pi) in order to\neliminate negative values, which cause problems in plotting/saving.</li>\n<li><strong>itype</strong> (str, optional, default is '16bit'):\nFormat of the normalized fft arrays (that can be saved as images).\nIf '16bit' (default), the images will be 16-bit.\nIf '8bit' (less suitable, narrow range) the images will be 8-bit.</li>\n<li><strong>icut</strong> (TYPE, optional):\nDESCRIPTION. The default is None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">what</span><span class=\"o\">=</span><span class=\"s1\">&#39;intensity&#39;</span>, </span><span class=\"param\"><span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;16bit&#39;</span>, </span><span class=\"param\"><span class=\"n\">icut</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.fft.FFT.show", "modulename": "myimg.apps.fft", "qualname": "FFT.show", "kind": "function", "doc": "<p>Show FFT object = Fourier transform of an image.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>what</strong> (str, optional, default is 'intensity'):\nWhat result should be shown - 'intensity' or 'phase'.</li>\n<li><strong>axes</strong> (bool, optional, default is False):\nShow axes around the plotted/shown image.</li>\n<li><strong>cmap</strong> (str, optional, default is None):\nMatplotlib cmap name, such as 'magma' or 'viridis'.</li>\n<li><strong>icut</strong> (int or float, optional, default is None):\nIntensity cut value.\nIf icut = 1000, all intenstity values &gt;1000 are set to 1000.</li>\n<li><strong>colorbar</strong> (bool, optional, the default is False):\nIf True, a colorbar is added to the plot.</li>\n<li><strong>output</strong> (str or path-like object, optional, default is None):\nIf output argument is given, the plot is saved to {output} file.</li>\n<li><strong>dpi</strong> (int, optional, default is 300):\nDPI of the saved image.\nRelevant only if ouput is not None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The output is the image/plot of the Fourier transform result\n(intensity or phase), which is shown in the screen\nor (optionally) saved to an image file.</li>\n</ul>\n\n<h6 id=\"technical-note\">Technical note</h6>\n\n<p>The FFT results (intensity or phase) are shown/plotted using\nmatplotlib. Therefore, many arguments of the current <em>show</em> method\ncorrespond to matplotlib parameters (such as <em>cmap</em> argument).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">what</span><span class=\"o\">=</span><span class=\"s1\">&#39;intensity&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">icut</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">colorbar</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">output</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"mi\">300</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.fft.FFT.save", "modulename": "myimg.apps.fft", "qualname": "FFT.save", "kind": "function", "doc": "<p>Save FFT object = Fourier transform of an image.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output</strong> (str or path-like object, optional, default is 'fft.png'):\nName of the output file.</li>\n<li><strong>what</strong> (str, optional, default is 'intensity'):\nWhat result should be shown - 'intensity' or 'phase'.</li>\n<li><strong>itype</strong> (str, optional, default is '16bit'):\nFormat of the output image.\nIf '16bit' (default) =&gt; 16-bit grayscale image.\nIf '8bit' (less suitable, narrow range) =&gt; 8-bit grayscale image.</li>\n<li><strong>icut</strong> (int or float, optional, default is None):\nIntensity cut value.\nIf icut = 1000, all intenstity values &gt;1000 are set to 1000.</li>\n<li><strong>dpi</strong> (int, optional, default is 300):\nDPI of the saved image.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The output is the image the Fourier transform result\n(intensity or phase), which is saved in {output} file.</li>\n</ul>\n\n<h6 id=\"technical-note\">Technical note</h6>\n\n<p>The FFT results (images of 'intensity' or 'phase') can be saved\neither as matplotlib plots (show method with optional output argument)\nor standard grayscale images (save method = this method).\nThe save method gives standard result, the show method can yield\ncolour images with various cmaps and/or colorbars,\nwhich are suitable for presentations.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">output</span><span class=\"o\">=</span><span class=\"s1\">&#39;fft.png&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">what</span><span class=\"o\">=</span><span class=\"s1\">&#39;intensity&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;16bit&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">icut</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"mi\">300</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels", "modulename": "myimg.apps.iLabels", "kind": "module", "doc": "<p>Created on Wed Apr 30 10:50:17 2025</p>\n\n<p>@author: p-sik</p>\n"}, {"fullname": "myimg.apps.iLabels.classPeaks", "modulename": "myimg.apps.iLabels.classPeaks", "kind": "module", "doc": "<p>Created on Wed Apr 30 10:16:17 2025</p>\n\n<p>@author: p-sik</p>\n"}, {"fullname": "myimg.apps.iLabels.classPeaks.Peaks", "modulename": "myimg.apps.iLabels.classPeaks", "qualname": "Peaks", "kind": "class", "doc": "<p>Class defining Peaks objects.</p>\n\n<ul>\n<li>Peaks object = source image + list-of-its-peaks.</li>\n<li>See __init__ for more information about initial object parameters.</li>\n<li>More help: <a href=\"https://mirekslouf.github.io/myimg/docs/pdoc.html/myimg.html\">https://mirekslouf.github.io/myimg/docs/pdoc.html/myimg.html</a></li>\n</ul>\n"}, {"fullname": "myimg.apps.iLabels.classPeaks.Peaks.__init__", "modulename": "myimg.apps.iLabels.classPeaks", "qualname": "Peaks.__init__", "kind": "function", "doc": "<p>Initialize Peaks object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong> (pandas.DataFrame object):\nDataFrame containing peak coordinates and types.</li>\n<li><strong>img</strong> (PIL Image object, optional):\nThe image associated with the peaks.</li>\n<li><strong>img_name</strong> (str, optional):\nName of the image file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Peaks object</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">img</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">img_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">file_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;output&#39;</span>, </span><span class=\"param\"><span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "myimg.apps.iLabels.classPeaks.Peaks.read", "modulename": "myimg.apps.iLabels.classPeaks", "qualname": "Peaks.read", "kind": "function", "doc": "<p>Load the peak data from a .pkl file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str):\nThe path to the .pkl file containing the peak data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.classPeaks.Peaks.show_as_text", "modulename": "myimg.apps.iLabels.classPeaks", "qualname": "Peaks.show_as_text", "kind": "function", "doc": "<p>Display the peak data as text.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.classPeaks.Peaks.show_in_image", "modulename": "myimg.apps.iLabels.classPeaks", "qualname": "Peaks.show_in_image", "kind": "function", "doc": "<p>Display the image with the peak data overlay (if image and data exist),\nwith different colors for different particle types.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>self</strong> (object):\nThe instance of the class containing the image and peak data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The method does not return a value but displays an image with\noverlayed peak data.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If the DataFrame does not contain the required columns.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.classPeaks.Peaks.find", "modulename": "myimg.apps.iLabels.classPeaks", "qualname": "Peaks.find", "kind": "function", "doc": "<p>Create an interactive plot for particle classification.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>self</strong> (object):\nThe instance of the class that contains the image\nand associated methods.</li>\n<li><strong>method</strong> (str, optional):\nThe method to use for finding peaks.\nOptions: 'manual' or 'ccorr'.\nDefault is 'manual'.</li>\n<li><strong>ref</strong> (bool, optional):\nWhether the nanoparticles' coordinates should be refined.\nDefault is True.</li>\n<li><strong>mask</strong> (array-like or str, optional):\nEither a NumPy array representing the mask or a string path\nto a .pkl file containing the mask. Required if method='ccorr'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: This method does not return a value\nbut displays an interactive plot for particle classification.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If the specified method is not recognized.</li>\n<li><strong>FileNotFoundError</strong>: If the provided mask path does not exist.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;manual&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ref</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">mask_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">midx</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">thr</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.classPeaks.Peaks.characterize", "modulename": "myimg.apps.iLabels.classPeaks", "qualname": "Peaks.characterize", "kind": "function", "doc": "<p>Characterizes image peaks by extracting ROIs, computing features, and \nselecting the most informative ones for classification.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img_path</strong> (str):\nPath to the image file (e.g., '.tif') to analyze.</li>\n<li><strong>peak_path</strong> (str):\nPath to the pickled file containing detected peak coordinates \n(typically a DataFrame or array).</li>\n<li><strong>mask_path</strong> (str):\nDirectory containing class masks as 'mask1.pkl' to 'mask4.pkl'.</li>\n<li><strong>imID</strong> (str, optional):\nIdentifier for the image, used for internal labeling\nDefault is 'im0x'</li>\n<li><strong>preprocess</strong> (bool, optional):\nWhether to preprocess the input image (CLAHE, gamma correction, \nnormalization). Default is True.</li>\n<li><strong>show</strong> (bool, optional):\nIf True, displays example ROIs and feature visualizations.\nDfault is False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: This method modifies the internal state of the object by setting \nattributes such as self.features, self.selection, self.X_train, \nself.X_test, etc.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">img_path</span>,</span><span class=\"param\">\t<span class=\"n\">peak_path</span>,</span><span class=\"param\">\t<span class=\"n\">mask_path</span>,</span><span class=\"param\">\t<span class=\"n\">imID</span><span class=\"o\">=</span><span class=\"s1\">&#39;im0x&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.classPeaks.Peaks.correct", "modulename": "myimg.apps.iLabels.classPeaks", "qualname": "Peaks.correct", "kind": "function", "doc": "<p>Refines or corrects peak coordinates based on a specified method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>image</strong> (np.ndarray):\nThe input image in which the coordinates will be corrected</li>\n<li><strong>coords</strong> (pandas.DataFrame):\nDataFrame containing peak coordinates (e.g., 'X' and 'Y' columns).</li>\n<li><strong>s</strong> (int, optional):\nHalf-size of the square ROI to extract around each coordinate. \nNecessary for \"intensity\" method. Default is 20.</li>\n<li><strong>method</strong> (str, optional):\nCorrection method to use. Currently only 'intensity' is supported \n(uses intensity-based ROI extraction). Default is 'intensity'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.DataFrame</strong>: Updated coordinates DataFrame after correction.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">coords</span>, </span><span class=\"param\"><span class=\"n\">s</span><span class=\"o\">=</span><span class=\"mi\">20</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;intensity&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.classPeaks.Peaks.classify", "modulename": "myimg.apps.iLabels.classPeaks", "qualname": "Peaks.classify", "kind": "function", "doc": "<p>Classifies input data using the specified classification method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (pandas.DataFrame or np.ndarray):\nThe feature data to classify.</li>\n<li><strong>method</strong> (str, optional):\nThe classification method to use. Currently, only 'rfc' (Random \nForest Classifier) is supported. \nDefault is 'gauss_fit' (placeholder for future extensions).</li>\n<li><strong>target</strong> (array-like, optional):\nGround truth labels for the data (used for evaluation if provided).</li>\n<li><strong>estimator</strong> (RandomForestClassifier or str, optional):\nA pre-trained classifier or a path to a saved estimator file (.pkl).\nIf None, a new RandomForestClassifier will be optimized and trained.</li>\n<li><strong>param_dist</strong> (dict, optional):\nHyperparameter search space for optimizing the RandomForestClassifier.\nUsed only when training a new estimator.</li>\n<li><strong>sfeatures</strong> (list of str, optional):\nList of selected feature names to use for classification. If None, \nuses <code>self.selection</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>y_pred</strong> (np.ndarray):\nPredicted class labels for the input data.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If the provided estimator is neither a valid path nor a classifier \ninstance.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;gauss_fit&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">estimator</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">param_dist</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sfeatures</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.classifiers", "modulename": "myimg.apps.iLabels.classifiers", "kind": "module", "doc": "<p>Created on Tue Apr 29 11:13:42 2025</p>\n\n<p>@author: p-sik</p>\n"}, {"fullname": "myimg.apps.iLabels.classifiers.dataset", "modulename": "myimg.apps.iLabels.classifiers", "qualname": "dataset", "kind": "function", "doc": "<p>Splits the input dataset into training, testing, and optionally validation \nsets.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>features : pandas.DataFrame\n    A DataFrame containing the feature data. The DataFrame must include the \n    target column 'Class' and other feature columns.</p>\n\n<p>valid : bool, optional, default=False\n    If True, splits the test set further into a validation set. If False, \n    only splits into training and testing sets.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>X_train : pandas.DataFrame\n    The training features.</p>\n\n<p>X_test : pandas.DataFrame\n    The testing features.</p>\n\n<p>y_train : pandas.Series\n    The target variable (Class) for the training set.</p>\n\n<p>y_test : pandas.Series\n    The target variable (Class) for the testing set.</p>\n\n<p>X_valid : pandas.DataFrame, optional\n    The validation features, returned only if valid=True.</p>\n\n<p>y_valid : pandas.Series, optional\n    The target variable (Class) for the validation set, returned only if \n    valid=True.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">features</span>, </span><span class=\"param\"><span class=\"n\">valid</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.classifiers.get_optimal_rfc", "modulename": "myimg.apps.iLabels.classifiers", "qualname": "get_optimal_rfc", "kind": "function", "doc": "<p>Performs a random search to find the optimal hyperparameters for a Random \nForest Classifier.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>X_train : pandas.DataFrame or numpy.ndarray\n    Training data (features).</p>\n\n<p>y_train : pandas.Series or numpy.ndarray\n    Target labels corresponding to the training data.</p>\n\n<p>param_dist : dict or None, optional, default=None\n    A dictionary of parameter distributions for random search. If None, \n    default parameter distributions are used. The dictionary should specify \n    the hyperparameters and their possible values (or distributions). \n    For example:\n        - n_estimators\n        - max_depth\n        - min_samples_split\n        - min_samples_leaf\n        - max_features</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>estimator : RandomForestClassifier\n    The best model found by random search.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">param_dist</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.classifiers.select_features", "modulename": "myimg.apps.iLabels.classifiers", "qualname": "select_features", "kind": "function", "doc": "<p>Selects the most important features using forward Sequential Feature \nSelection (SFS) based on a given estimator (default: RandomForestClassifier).</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>X_train : pandas.DataFrame or numpy.ndarray\n    Training feature data.</p>\n\n<p>y_train : pandas.Series or numpy.ndarray\n    Target labels corresponding to the training data.</p>\n\n<p>num : integer, optional (default=5)\n    Number of features to be selected.</p>\n\n<p>estimator : sklearn estimator, optional (default=None)\n    The model used to evaluate feature importance during selection. If None,\n    a RandomForestClassifier with class_weight='balanced' will be used.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>selected_features : pandas.Index\n    Names of the selected features.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">estimator</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.classifiers.fitting", "modulename": "myimg.apps.iLabels.classifiers", "qualname": "fitting", "kind": "function", "doc": "<p>Fits a classifier to the training data and reports performance metrics.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>X_train : pd.DataFrame or np.ndarray\n    Feature matrix for training.</p>\n\n<p>y_train : array-like\n    Target labels for training.</p>\n\n<p>estimator : sklearn-like classifier\n    Any object with <code>.fit()</code> and <code>.predict()</code> methods</p>\n\n<p>reports : bool, default=True\n    If True, prints training accuracy and classification report.</p>\n\n<p>sfeatures : list of str or list of int, optional\n    Subset of features to use for training. If None, all features are used.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>estimator : object\n    The trained classifier.</p>\n\n<p>y_pred : array-like\n    Predicted labels for the training data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">estimator</span>, </span><span class=\"param\"><span class=\"n\">reports</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">sfeatures</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.classifiers.predicting", "modulename": "myimg.apps.iLabels.classifiers", "qualname": "predicting", "kind": "function", "doc": "<p>Uses a trained classifier to make predictions on test data and optionally \nevaluates performance.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>X_test : pd.DataFrame or np.ndarray\n    Feature matrix for testing.</p>\n\n<p>estimator : sklearn-like classifier\n    Trained model with a <code>.predict()</code> method.</p>\n\n<p>sfeatures : list of str or list of int, optional \n    Subset of features to use for prediction. If None, all features are used.</p>\n\n<p>y_test : array-like, optional\n    Ground truth labels. If provided, accuracy and a classification report \n    will be printed.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>y_pred : array-like\n    Predicted labels for the test data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">estimator</span>, </span><span class=\"param\"><span class=\"n\">sfeatures</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">y_test</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.detectors", "modulename": "myimg.apps.iLabels.detectors", "kind": "module", "doc": "<p>Created on Wed Apr 30 08:19:46 2025</p>\n\n<p>@author: p-sik</p>\n"}, {"fullname": "myimg.apps.iLabels.detectors.detector_correlation", "modulename": "myimg.apps.iLabels.detectors", "qualname": "detector_correlation", "kind": "function", "doc": "<p>Detect nanoparticles by correlating mask over image.</p>\n\n<p>Parameters:\n    image: 2D np.array\n        The input image where to detect nanoparticles.\n    mask: 2D np.array\n        The template mask (nanoparticle).\n    threshold: float\n        Minimum correlation score to consider a detection (default 0.5).</p>\n\n<p>Returns:\n    centers: list of (row, col) tuples\n        List of center coordinates of detected nanoparticles.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">mask</span>, </span><span class=\"param\"><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>, </span><span class=\"param\"><span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.features", "modulename": "myimg.apps.iLabels.features", "kind": "module", "doc": "<p>Created on Tue Apr 29 08:08:54 2025</p>\n\n<p>@author: p-sik</p>\n"}, {"fullname": "myimg.apps.iLabels.features.get_features", "modulename": "myimg.apps.iLabels.features", "qualname": "get_features", "kind": "function", "doc": "<p>Extracts and combines multiple types of features from ROI images:\n    - statistical\n    - morphological\n    - correlation-based\n    - Gaussian-fitting features.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>rois : list of tuple\n    List of tuples where each tuple is (roi, label), with:\n    - roi : np.ndarray\n        A 2D array representing the image of the ROI.\n    - label : str or int\n        Identifier or class label for the ROI.</p>\n\n<p>df : pandas.DataFrame\n    DataFrame containing metadata for each ROI. It is expected to contain\n    information like coordinates, class labels, and notes.</p>\n\n<p>masks : list of np.ndarray\n    List of binary masks (same size as ROIs), where each mask defines the \n    region of interest used for correlation feature extraction.</p>\n\n<p>show : bool, optional \n    If True, displays visualizations during feature extraction (e.g., for \n    verification). Default is False.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>combined_props : pandas.DataFrame\n    A DataFrame containing all extracted features:\n    - Statistical and morphological features\n    - Gaussian fit parameters\n    - Correlation-based features\n    The class column is retained only once to avoid duplication.</p>\n\n<p>propsArr : np.ndarray\n    A NumPy array containing additional features or summary statistics, \n    typically used for low-dimensional numerical representation.</p>\n\n<h2 id=\"notes\">Notes:</h2>\n\n<ul>\n<li>Internally calls:\n<ul>\n<li><code>extended_features()</code> for statistical and morphological features</li>\n<li><code>corr_features()</code> for correlation metrics using masks</li>\n<li><code>gauss_params()</code> and <code>gauss_features()</code> for Gaussian fitting</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rois</span>, </span><span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">masks</span>, </span><span class=\"param\"><span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.features.extended_features", "modulename": "myimg.apps.iLabels.features", "qualname": "extended_features", "kind": "function", "doc": "<p>Extracts and extends feature sets from a list of Region of Interest (ROI)\nimages and returns two DataFrames containing scalar and array-based features \nrespectively.</p>\n\n<p>The function computes basic ROI features via <code>roi_features()</code> and then \nperforms additional morphological and shape analysis on each ROI, including \nthresholding (Otsu), morphological filtering, region labeling, and extraction \nof geometric and moment-based properties. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rois</strong> (list of ndarray):\nList of 2D NumPy arrays, each representing an ROI (grayscale image).</li>\n<li><strong>df</strong> (pandas.DataFrame):\nDataFrame containing metadata associated with each ROI, including a \n'Class' column that specifies the particle category or label.</li>\n<li><strong>show</strong> (bool, optional (default=True)):\nIf True, displays boxplots of each numeric feature grouped by class. \nSkips features that are non-numeric or contain NaN/inf.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>df1</strong> (pandas.DataFrame):\nDataFrame with original <code>df</code> columns, features from <code>roi_features</code>, \nand additional scalar morphological features such as area, eccentricity, \nsolidity, etc.</li>\n<li><strong>df2</strong> (pandas.DataFrame):\nDataFrame with original <code>df</code> columns and array-based features including \nimage moments and central moments for each ROI.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>For ROIs that are empty or contain uniform values, NaNs are assigned to \nall extracted features.</li>\n<li>Features extracted include:\n<ul>\n<li>Scalar: area, convex area, eccentricity, solidity, equivalent diameter, \nextent, number of pixels, orientation, and perimeter.</li>\n<li>Array: raw spatial moments and central moments (both as 3x3 arrays).</li>\n</ul></li>\n<li>The function assumes that the <code>df</code> DataFrame has the same number of rows \nas the number of ROIs provided, and that it includes a 'Class' column for \ngrouping.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Handles all exceptions during individual ROI processing and prints an error</strong></li>\n<li><strong>message.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rois</span>, </span><span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.features.roi_features", "modulename": "myimg.apps.iLabels.features", "qualname": "roi_features", "kind": "function", "doc": "<p>Extracts intensity-based statistical features from a list of ROI images and \noptionally visualizes feature distributions across classes.</p>\n\n<p>This function computes various intensity statistics such as max, min, mean,\nmedian, standard deviation, variance, skewness, and kurtosis for each\nRegion of Interest (ROI). It associates these features with the corresponding \nclass labels from the input DataFrame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rois</strong> (list of ndarray):\nList of 2D NumPy arrays representing grayscale ROI images.</li>\n<li><strong>df</strong> (pandas.DataFrame):\nDataFrame containing metadata for each ROI. Must include a 'Class' \ncolumn specifying the category of each ROI.</li>\n<li><strong>show</strong> (bool, optional (default=True)):\nIf True, generates boxplots of each feature grouped by class for visual \ncomparison.</li>\n<li><strong>out</strong> (int, optional (default=1)):\nDetermines the format of the output:\n<ul>\n<li>If 0: returns a new DataFrame containing only the computed features \nand class labels.</li>\n<li>If 1: appends the computed features to the original DataFrame and \nreturns the result.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.DataFrame</strong>: Depending on <code>out</code>:\n<ul>\n<li>If out == 0: returns a new DataFrame with computed features and \n'class' column.</li>\n<li>If out == 1: returns the original DataFrame with added columns for \neach computed feature.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>For empty ROIs, NaN is assigned to all computed features.</li>\n<li>The 'Class' column is extracted from <code>df.Class</code> and is expected to be \nconvertible to scalar.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rois</span>, </span><span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">out</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.features.corr_features", "modulename": "myimg.apps.iLabels.features", "qualname": "corr_features", "kind": "function", "doc": "<p>Calculates image-based correlation (normalized cross-correlation)\nbetween each ROI and each class-average mask using template matching.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>rois : list of np.ndarray\n    List of 2D ROI images (grayscale). Each ROI should be of the same shape \n    as the corresponding masks for valid correlation computation.</p>\n\n<p>df : pandas.DataFrame\n    DataFrame with one row per ROI. It must have at least the same length \n    as <code>rois</code>. Expected to include a 'Class' column, although it's not used \n    directly in this function.</p>\n\n<p>masks : dict or list of np.ndarray\n    Class-average masks for template matching. Can be:\n        - A dictionary with keys like 'CorrCL1', 'CorrCL2', ..., 'CorrCL4'.\n        - A list of four masks (assumed ordered by class index 1 to 4).</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>pd.DataFrame\n    DataFrame of shape (n_rois, 5), with:\n        - One column per class: correlation scores \n        - A 'bestMatch' column: integer from 1 to 4, indicating the class \n                                with max correlation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rois</span>, </span><span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">masks</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.features.gauss_features", "modulename": "myimg.apps.iLabels.features", "qualname": "gauss_features", "kind": "function", "doc": "<p>Computes derived features from 2D Gaussian parameters.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df_params</strong> (pandas.DataFrame):\nA DataFrame with columns: ['class', 'amplitude', 'sigma_x', 'sigma_y', \n 'theta', 'offset']</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>df_features</strong> (pandas.DataFrame):\nThe input DataFrame with additional derived features: fwhm_x, fwhm_y, \narea, eccentricity, ellipticity, orientation_deg, peak_intensity, \ncontrast, integrated_intensity</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df_params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.features.gauss_params", "modulename": "myimg.apps.iLabels.features", "qualname": "gauss_params", "kind": "function", "doc": "<p>Fits a 2D Gaussian function to each image (ROI) in the given list and \nreturns the estimated parameters for each fit in a DataFrame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>image_list</strong> (list of np.ndarray):\nA list of 2D NumPy arrays representing grayscale image regions (ROIs) \nwhere a Gaussian-like spot is expected.</li>\n<li><strong>df</strong> (pandas.DataFrame):\nDataFrame containing metadata for each ROI, including a 'Class' column \nthat assigns a label to each image.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><p><strong>df_params</strong> (pandas.DataFrame):\nA DataFrame where each row corresponds to the parameters \nof a 2D Gaussian fit for an image in <code>image_list</code>. If a fit fails, \nthe row contains NaNs.</p>\n\n<p>Columns: class (label of the ROI), amplitude (peak height of the Gauss),\n         x0, y0 (center coordinates), sigma_x (std deviation in x dir.),\n         sigma_y  (std deviation in y direction), theta (rotation angle \n         of the Gaussian ellipse), offset (constant background level)</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image_list</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.features.gauss2D", "modulename": "myimg.apps.iLabels.features", "qualname": "gauss2D", "kind": "function", "doc": "<p>Computes a 2D Gaussian function with elliptical shape and rotation.</p>\n\n<p>This function is typically used for curve fitting on 2D image data, \nsuch as intensity spots or blobs.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>xy</strong> (tuple of np.ndarray):\nA tuple of two flattened coordinate arrays (x, y), typically created\nfrom a meshgrid and then stacked for curve fitting. Shape of each array \nshould be (N,), where N is the number of pixels.</li>\n<li><strong>amplitude</strong> (float):\nPeak height of the Gaussian.</li>\n<li><strong>xo</strong> (float):\nX-coordinate of the Gaussian center.</li>\n<li><strong>yo</strong> (float):\nY-coordinate of the Gaussian center.</li>\n<li><strong>sigma_x</strong> (float):\nStandard deviation in the x-direction.</li>\n<li><strong>sigma_y</strong> (float):\nStandard deviation in the y-direction.</li>\n<li><strong>theta</strong> (float):\nRotation angle of the Gaussian (in radians), counterclockwise.</li>\n<li><strong>offset</strong> (float):\nConstant offset or background intensity.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>g</strong> (np.ndarray):\nThe 2D Gaussian function values evaluated at the (x, y) coordinates,\nreturned as a 1D array (raveled). This is required by fitting functions\nlike <code>scipy.optimize.curve_fit</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xy</span>, </span><span class=\"param\"><span class=\"n\">amplitude</span>, </span><span class=\"param\"><span class=\"n\">xo</span>, </span><span class=\"param\"><span class=\"n\">yo</span>, </span><span class=\"param\"><span class=\"n\">sigma_x</span>, </span><span class=\"param\"><span class=\"n\">sigma_y</span>, </span><span class=\"param\"><span class=\"n\">theta</span>, </span><span class=\"param\"><span class=\"n\">offset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.features.visualize_features", "modulename": "myimg.apps.iLabels.features", "qualname": "visualize_features", "kind": "function", "doc": "<p>Visualize features in the dataframe using various methods.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>df : pandas.DataFrame\n    DataFrame containing feature columns and a class label column.\nmethod : str, optional (default=\"box\")\n    Visualization method to use. Options are:\n        - \"box\" : Individual box plots for each feature grouped by class.\n        - \"pair\": Pairwise scatter plots between features, color-coded \n                  by class.\n        - \"heat\": Heatmap of feature correlations.\nshow : bool, optional (default=True)\n    If method is \"box\", show individual box plots for each feature.\nclass_col : str or None, optional (default=None)\n    Name of the class label column. If None, the function tries to infer \n    the class column by looking for a column with &lt;10 unique values and \n    categorical/object/integer dtype.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>df : pandas.DataFrame\n    The original dataframe passed in, unchanged.</p>\n\n<h2 id=\"raises\">Raises:</h2>\n\n<p>ValueError\n    If class_col cannot be inferred or if method is invalid or insufficient \n    features are present for plotting.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;box&#39;</span>, </span><span class=\"param\"><span class=\"n\">class_col</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.roi", "modulename": "myimg.apps.iLabels.roi", "kind": "module", "doc": "<p>Created on Tue Apr 29 07:10:29 2025</p>\n\n<p>@author: p-sik</p>\n"}, {"fullname": "myimg.apps.iLabels.roi.load_myimg", "modulename": "myimg.apps.iLabels.roi", "qualname": "load_myimg", "kind": "function", "doc": "<p>Load an image from a file path or PIL.Image, crop pixels from the bottom, \npreprocess, save the result, and return both the original and preprocessed \ncropped images as NumPy arrays.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>image : str or PIL.Image.Image\n    File path or PIL image object.\ncut_bottom : int\n    Number of pixels to cut from the bottom.\nsave_as : str\n    Filename to save the cropped image.\nshow : bool\n    Whether to display the cropped image.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>tuple: (original_image_array, cropped_preprocessed_image_array)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">cut_bottom</span><span class=\"o\">=</span><span class=\"mi\">300</span>, </span><span class=\"param\"><span class=\"n\">save_as</span><span class=\"o\">=</span><span class=\"s1\">&#39;output.tif&#39;</span>, </span><span class=\"param\"><span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.roi.preprocess_image", "modulename": "myimg.apps.iLabels.roi", "qualname": "preprocess_image", "kind": "function", "doc": "<p>Preprocess SEM/TEM image to correct for contrast and brightness variations.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>image : np.ndarray\n    Input image (BGR, RGB, or grayscale).\napply_clahe : bool\n    Whether to apply CLAHE for local contrast enhancement.\ngamma : float\n    Gamma value for gamma correction (1.0 = no change).\nnormalize : bool\n    Whether to normalize intensity values to 0\u2013255.</p>\n\n<p>Returns:\ngamma_corrected : np.ndarray\n    Preprocessed image (grayscale, uint8).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">apply_clahe</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"mf\">1.2</span>, </span><span class=\"param\"><span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.roi.prep_data", "modulename": "myimg.apps.iLabels.roi", "qualname": "prep_data", "kind": "function", "doc": "<p>Load an image and its peak annotations, and filter out low-X/Y points.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>fpath_img : str\n    Path to the image file (e.g., .tif).\nfpath_peaks : str\n    Path to the associated peaks file (e.g., .pkl).\nmin_xy : int, optional\n    Minimum allowed value for X and Y coordinates (default is 20).\nimID : str, optional\n    Identifier to assign to all peaks (default is 'im01').\nshow : bool, optional\n    If True, shows the annotated image using <code>show_in_image</code>.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>arr : np.ndarray\n    Image array.\ndf : pd.DataFrame\n    Filtered DataFrame with peak coordinates.\nimg_obj : MyImage\n    The loaded MyImage object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fpath_img</span>, </span><span class=\"param\"><span class=\"n\">fpath_peaks</span>, </span><span class=\"param\"><span class=\"n\">min_xy</span><span class=\"o\">=</span><span class=\"mi\">20</span>, </span><span class=\"param\"><span class=\"n\">imID</span><span class=\"o\">=</span><span class=\"s1\">&#39;im01&#39;</span>, </span><span class=\"param\"><span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.roi.get_ROIs", "modulename": "myimg.apps.iLabels.roi", "qualname": "get_ROIs", "kind": "function", "doc": "<p>Extract and visualize square ROIs (Regions of Interest) from an image \nbased on coordinates provided in a DataFrame. Each ROI is centered \non the brightest region (maximum intensity) within a preliminary square \nextracted around the initial coordinate.</p>\n\n<p>If the center shifts, the function updates the coordinates in the returned \nDataFrame.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>im : np.ndarray\n    Input 2D (grayscale) image.</p>\n\n<p>df : pandas.DataFrame\n    DataFrame containing at least the following columns:\n    - 'X': horizontal coordinate (column index).\n    - 'Y': vertical coordinate (row index).\n    - 'Class': class label, used for color coding in visualization.</p>\n\n<p>s : int, optional\n    Half-side size of each ROI (ROI will be of size (2<em>s) x (2</em>s)).\n    Default is 20.</p>\n\n<p>norm : bool, optional\n    If True, return also min-max normalized versions of the ROIs.\n    Default is True.</p>\n\n<p>show :  bool, optional\n    If True, the input image will be displayed with detected ROIs.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>arr_roi : list of np.ndarray\n    List of extracted ROIs (centered on the brightest region).</p>\n\n<p>arr_norm : list of np.ndarray\n    List of min-max normalized ROIs (only if norm=True).</p>\n\n<p>corrected_df : pandas.DataFrame\n    Updated DataFrame with corrected 'X' and 'Y' coordinates reflecting \n    the center of maximum intensity inside each ROI.</p>\n\n<h2 id=\"notes\">Notes:</h2>\n\n<ul>\n<li>If an initial ROI around a coordinate would go out of image bounds, \nthe ROI is skipped and a warning is printed.</li>\n<li>If the re-centered ROI would go out of bounds, fallback to original \npreliminary ROI.</li>\n<li>The function visualizes the original image with ROI rectangles drawn on\nit, color-coded according to the class label.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">im</span>, </span><span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">s</span><span class=\"o\">=</span><span class=\"mi\">20</span>, </span><span class=\"param\"><span class=\"n\">norm</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.roi.create_masks", "modulename": "myimg.apps.iLabels.roi", "qualname": "create_masks", "kind": "function", "doc": "<p>Extracts n ROIs per class and computes average masks for each class.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>rois : list of tuple\n    List of ROI tuples (roi, label). Only the first element (roi) is used.</p>\n\n<p>df : pd.DataFrame\n    DataFrame containing labels for ROIs (must match rois list length).</p>\n\n<p>class_col : str\n    Column in df that contains class labels.</p>\n\n<p>n_per_class : int\n    Number of samples per class to average.</p>\n\n<p>show : bool\n    If True, display the average masks per class.</p>\n\n<p>save : bool\n    If True, save each average mask as a .pkl file.</p>\n\n<p>save_path : str\n    Path to the folder where the mask files will be saved.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>mean_masks : dict\n    Dictionary mapping class labels to their average mask (mean of n ROIs).</p>\n\n<p>class_order : list\n    List of class labels in the order they are plotted.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rois</span>,</span><span class=\"param\">\t<span class=\"n\">df</span>,</span><span class=\"param\">\t<span class=\"n\">class_col</span><span class=\"o\">=</span><span class=\"s1\">&#39;class&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">n_per_class</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;.&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.roi.min_max_normalize", "modulename": "myimg.apps.iLabels.roi", "qualname": "min_max_normalize", "kind": "function", "doc": "<p>Normalizes the list of images (2D arrays) using min-max scaling, rescaling \nthe values to a specified range for each individual image.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (list of np.ndarray):\nA list where each element is a 2D numpy array representing an image.</li>\n<li><strong>mrange</strong> (int, optional):\nThe desired range for normalization. Default is 255, which scales \nthe data between 0 and 255.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>normalized_data</strong> (list of np.ndarray):\nA list where each element is a normalized 2D numpy array (image).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">mrange</span><span class=\"o\">=</span><span class=\"mi\">255</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.iLabels.roi.show_random_rois", "modulename": "myimg.apps.iLabels.roi", "qualname": "show_random_rois", "kind": "function", "doc": "<p>Display a random subset of ROI (Region of Interest) images with titles \nderived from a DataFrame. Each ROI is shown in its own figure.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>rois : list of tuple\n    A list where each element is a tuple (roi, label), with:\n    - roi : np.ndarray\n        A 2D array representing the image of the ROI.\n    - label : str or int\n        A label or identifier associated with the ROI, used in the title.</p>\n\n<p>df : pandas.DataFrame\n    DataFrame containing metadata about the ROIs. Must be the same length \n    as <code>rois</code>. If it contains a column named 'Note', its values are used \n    as titles for the displayed images.</p>\n\n<p>n : int, optional (default=5)\n    Number of random ROI images to display. If <code>n</code> is greater than the \n    number of available ROIs, all will be shown.</p>\n\n<p>cmap : str, optional (default='viridis')\n    Colormap to use for displaying the ROI images.</p>\n\n<h2 id=\"raises\">Raises:</h2>\n\n<p>AssertionError\n    If the length of <code>rois</code> and <code>df</code> do not match.</p>\n\n<h2 id=\"notes\">Notes:</h2>\n\n<ul>\n<li>Displays each image in a separate <code>matplotlib</code> figure.</li>\n<li>If 'Note' column exists in <code>df</code>, it is included in the figure title.</li>\n<li>The label from each ROI tuple is also shown in the title.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rois</span>, </span><span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;viridis&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.profiles", "modulename": "myimg.apps.profiles", "kind": "module", "doc": "<h2 id=\"module-myimgappsprofiles\">Module: myimg.apps.profiles</h2>\n\n<p>Radial and azimuthal profiles for package myimg.</p>\n"}, {"fullname": "myimg.apps.profiles.RadialProfile", "modulename": "myimg.apps.profiles", "qualname": "RadialProfile", "kind": "class", "doc": "<p>Class defining <em>RadialProfile</em> object.</p>\n"}, {"fullname": "myimg.apps.profiles.AzimuthalProfile", "modulename": "myimg.apps.profiles", "qualname": "AzimuthalProfile", "kind": "class", "doc": "<p>Class defining <em>AzimuthalProfile</em> object.</p>\n"}, {"fullname": "myimg.apps.simuParticles", "modulename": "myimg.apps.simuParticles", "kind": "module", "doc": "<h2 id=\"module-myimgdsimsimuparticles\">Module: myimg.dsim.simuParticles</h2>\n\n<p>Simulate nanoparticles to be added to your existing EM image.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Example: How to use dataGenerator and export nanoparticles (coordinates,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>           <span class=\"n\">classification</span><span class=\"p\">)</span> <span class=\"n\">visualize</span> <span class=\"n\">outputs</span><span class=\"o\">.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimg.dsim.simuParticles</span> <span class=\"k\">as</span> <span class=\"nn\">midsp</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Initialize simulator, set simulation parameters</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simulator</span> <span class=\"o\">=</span> <span class=\"n\">midsp</span><span class=\"o\">.</span><span class=\"n\">dataGenerator</span><span class=\"p\">(</span><span class=\"n\">imWidth</span><span class=\"o\">=</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">imHeight</span><span class=\"o\">=</span><span class=\"mi\">512</span><span class=\"p\">,</span>\n<span class=\"go\">                                    numP=50,</span>\n<span class=\"go\">                                    disp=True,</span>\n<span class=\"go\">                                    smallParticles=(0.2,1),</span>\n<span class=\"go\">                                    bigParticles=(1.1,2),</span>\n<span class=\"go\">                                    thrGauss=0.01,</span>\n<span class=\"go\">                                    blurAmp=0.5)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Get the simulated image and nanoparticle data</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">imSimu</span> <span class=\"o\">=</span> <span class=\"n\">simulator</span><span class=\"o\">.</span><span class=\"n\">imNanop</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dfSimu</span> <span class=\"o\">=</span> <span class=\"n\">simulator</span><span class=\"o\">.</span><span class=\"n\">output</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Save simulated data</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simulator</span><span class=\"o\">.</span><span class=\"n\">save_outputs</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">dfSimu</span><span class=\"p\">,</span>\n<span class=\"go\">                           image=imSimu,</span>\n<span class=\"go\">                           path=&quot;path/to/your/data&quot;)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Load simulated data</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dfSimu_loaded</span><span class=\"p\">,</span> <span class=\"n\">imSimu_loaded</span> <span class=\"o\">=</span> <span class=\"n\">simulator</span><span class=\"o\">.</span><span class=\"n\">load_data</span><span class=\"p\">(</span>\n<span class=\"go\">                                    path=&quot;path/to/your/data&quot;,</span>\n<span class=\"go\">                                    dfFile=&quot;dfSimu.pkl&quot;,</span>\n<span class=\"go\">                                    imFile=&quot;imSimu.png&quot;)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n</code></pre>\n</div>\n"}, {"fullname": "myimg.apps.simuParticles.dataGenerator", "modulename": "myimg.apps.simuParticles", "qualname": "dataGenerator", "kind": "class", "doc": "<p>Initialize the dataGenerator class with options for controlling\nparticle sizes, sharpness, and display preferences.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>imWidth</strong> (int, optional):\nImage width (pixels). Default is 512.</li>\n<li><strong>imHeight</strong> (int, optional):\nImage height (pixels). Default is 0.</li>\n<li><strong>numP</strong> (int, optional):\nNumber of particles to simulate. Default is 4.</li>\n<li><strong>disp</strong> (bool, optional):\nWhether to display the images. Default is True.</li>\n<li><strong>smallParticle</strong> (tuple, optional):\nSize range for small particles (min, max). Default is (1, 5).</li>\n<li><strong>bigParticle</strong> (tuple, optional):\nSize range for big particles (min, max). Default is (10, 15).</li>\n<li><strong>thrGauss</strong> (float, optional):\nThreshold for sharpness in Gaussian. Default is 0.01.</li>\n<li><strong>blurAmp</strong> (float, optional):\nAmplitude for blurry particles. Default is 0.5.</li>\n</ul>\n"}, {"fullname": "myimg.apps.simuParticles.dataGenerator.im_simulator", "modulename": "myimg.apps.simuParticles", "qualname": "dataGenerator.im_simulator", "kind": "function", "doc": "<p>Simulate an image with random points.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.simuParticles.dataGenerator.gaussian2D", "modulename": "myimg.apps.simuParticles", "qualname": "dataGenerator.gaussian2D", "kind": "function", "doc": "<p>Create a 2D Gaussian distribution.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong> (np.ndarray):\nA meshgrid of x-coordinates.</li>\n<li><strong>Y</strong> (np.ndarray):\nA meshgrid of y-coordinates.</li>\n<li><strong>h</strong> (float):\nThe amplitude (maximum height) of the Gaussian distribution.</li>\n<li><strong>x0</strong> (float):\nThe x-coordinate of the center of the Gaussian.</li>\n<li><strong>y0</strong> (float):\nThe y-coordinate of the center of the Gaussian.</li>\n<li><strong>sx</strong> (float):\nThe standard deviation of the Gaussian along the x-axis, \ncontrolling its width in the x direction.</li>\n<li><strong>sy</strong> (float):\nThe standard deviation of the Gaussian along the y-axis, \ncontrolling its width in the y direction.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: A 2D array representing the Gaussian distribution over \nthe specified grid.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">Y</span>, </span><span class=\"param\"><span class=\"n\">h</span>, </span><span class=\"param\"><span class=\"n\">x0</span>, </span><span class=\"param\"><span class=\"n\">y0</span>, </span><span class=\"param\"><span class=\"n\">sx</span>, </span><span class=\"param\"><span class=\"n\">sy</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.simuParticles.dataGenerator.gaussian2D_sharp", "modulename": "myimg.apps.simuParticles", "qualname": "dataGenerator.gaussian2D_sharp", "kind": "function", "doc": "<p>Create a 2D Gaussian distribution with sharp edges by applying \na threshold.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong> (np.ndarray):\nA meshgrid of x-coordinates.</li>\n<li><strong>Y</strong> (np.ndarray):\nA meshgrid of y-coordinates.</li>\n<li><strong>h</strong> (float):\nThe amplitude (maximum height) of the Gaussian distribution.</li>\n<li><strong>x0</strong> (float):\nThe x-coordinate of the center of the Gaussian.</li>\n<li><strong>y0</strong> (float):\nThe y-coordinate of the center of the Gaussian.</li>\n<li><strong>sx</strong> (float):\nThe standard deviation of the Gaussian along the x-axis, \ncontrolling its width in the x direction.</li>\n<li><strong>sy</strong> (float):\nThe standard deviation of the Gaussian along the y-axis, \ncontrolling its width in the y direction.</li>\n<li><strong>threshold</strong> (float, optional):\nA threshold value to create sharp edges. All values below this \nthreshold are set to zero. Default is 0.7.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>gauss</strong> (np.ndarray):\nA 2D array representing the Gaussian distribution with values \nbelow the threshold set to zero, giving it sharper edges.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">Y</span>, </span><span class=\"param\"><span class=\"n\">h</span>, </span><span class=\"param\"><span class=\"n\">x0</span>, </span><span class=\"param\"><span class=\"n\">y0</span>, </span><span class=\"param\"><span class=\"n\">sx</span>, </span><span class=\"param\"><span class=\"n\">sy</span>, </span><span class=\"param\"><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.7</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.simuParticles.dataGenerator.gauss_specs", "modulename": "myimg.apps.simuParticles", "qualname": "dataGenerator.gauss_specs", "kind": "function", "doc": "<p>Generate a grid and Gaussian distribution parameters with random \nscaling for standard deviations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>grid_size</strong> (int, optional):\nThe size of the grid on which the Gaussian distribution will be \ndefined. It defines the range of the coordinates. Default is 50.</li>\n<li><strong>range2</strong> (tuple, optional):\nA tuple defining the range (min, max) for randomly sampling the \nstandard deviation (sx, sy) of the Gaussian distribution. \nDefault is (1, 5).</li>\n<li><strong>center</strong> (tuple, optional):\nA tuple containing the x and y coordinates of the center of the \nGaussian distribution. Default is (0, 0).</li>\n<li><strong>amp</strong> (float, optional):\nThe amplitude (maximum height) of the Gaussian distribution. \nDefault is 1.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>X</strong> (np.ndarray):\nA meshgrid of x-coordinates for the 2D Gaussian.</li>\n<li><strong>Y</strong> (np.ndarray):\nA meshgrid of y-coordinates for the 2D Gaussian.</li>\n<li><strong>h</strong> (float):\nThe amplitude (maximum height) of the Gaussian distribution.</li>\n<li><strong>x0</strong> (float):\nThe x-coordinate of the center of the Gaussian.</li>\n<li><strong>y0</strong> (float):\nThe y-coordinate of the center of the Gaussian.</li>\n<li><strong>sx</strong> (float):\nThe standard deviation of the Gaussian along the x-axis,\nrandomly selected from the given range.</li>\n<li><strong>sy</strong> (float):\nThe standard deviation of the Gaussian along the y-axis, \nequal to sx for an isotropic Gaussian.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">grid_size</span><span class=\"o\">=</span><span class=\"mi\">50</span>, </span><span class=\"param\"><span class=\"n\">range2</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>, </span><span class=\"param\"><span class=\"n\">center</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>, </span><span class=\"param\"><span class=\"n\">amp</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">iso</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.simuParticles.dataGenerator.generate_4G2D", "modulename": "myimg.apps.simuParticles", "qualname": "dataGenerator.generate_4G2D", "kind": "function", "doc": "<p>Generate all 2D Gaussian shapes based on different size and sharpness \nscenarios, for a set number of particles.</p>\n\n<p>This method generates four different types of particles, each defined \nby specific parameters for the 2D Gaussian or sharp Gaussian \n(with a threshold):</p>\n\n<ul>\n<li>Case 1: Small sharp circle (particleSS)    - Very sharp, small size</li>\n<li>Case 2: Small blurry Gaussian (particleSB) - Blurry, small size</li>\n<li>Case 3: Big sharp circle (particleBS)      - Very sharp, large size</li>\n<li>Case 4: Big blurry Gaussian (particleBB)   - Blurry, large size</li>\n</ul>\n\n<p>The particles are positioned based on previously generated random \ncoordinates (<code>self.x_coords</code> and <code>self.y_coords</code>).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: This function generates + stores the particles as attributes:\n<ul>\n<li><code>self.particleSS</code>: Small sharp circle</li>\n<li><code>self.particleSB</code>: Small blurry Gaussian</li>\n<li><code>self.particleBS</code>: Big sharp circle</li>\n<li><code>self.particleBB</code>: Big blurry Gaussian</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.simuParticles.dataGenerator.get_coordinates", "modulename": "myimg.apps.simuParticles", "qualname": "dataGenerator.get_coordinates", "kind": "function", "doc": "<p>Store the particle coordinates and their corresponding classes in \na pandas DataFrame.</p>\n\n<p>This method creates a pandas DataFrame that stores the x, y coordinates \nof the particles, as well as a class label for each particle. \nThe classes are assigned based on the segments defined in self.segments.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The output DataFrame is stored in the instance variable self.output\nIt contains the columns:\n<ul>\n<li>'X': x-coordinates of particles</li>\n<li>'Y': y-coordinates of particles</li>\n<li>'Class': particle class label (1, 2, 3, 4)</li>\n<li>'Note' : nanoparticle specification for given class</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.simuParticles.dataGenerator.get_simulation", "modulename": "myimg.apps.simuParticles", "qualname": "dataGenerator.get_simulation", "kind": "function", "doc": "<p>Combine all generated particle images into a final image and display it \nif required.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>show</strong> (int, optional):\nA flag to control whether the final image and 1D profile are \ndisplayed. Default is 1.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>imNanop</strong> (ndarray):\nA 2D numpy array representing the combined image of all particles.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">show</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.simuParticles.dataGenerator.show2D", "modulename": "myimg.apps.simuParticles", "qualname": "dataGenerator.show2D", "kind": "function", "doc": "<p>Display a 2D image of simulated nanoparticles.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>im</strong> (numpy.ndarray):\nThe 2D image (NumPy array) to be displayed.</li>\n<li><strong>cmap</strong> (str, optional):\nThe colormap to use for the image display. Default is \"gray\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: This function does not return any value. It simply displays \nthe image using Matplotlib.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The image is shown with the origin at the lower-left corner, \nand the axes are hidden. A default title of \"Simulated Nanoparticles\" \nis added to the plot.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">im</span>, </span><span class=\"param\"><span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span>, </span><span class=\"param\"><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.simuParticles.dataGenerator.show1D", "modulename": "myimg.apps.simuParticles", "qualname": "dataGenerator.show1D", "kind": "function", "doc": "<p>Displays a 1D profile of the simulated nanoparticle image along with \nclass-specific markers.</p>\n\n<p>This function computes the 1D profile of the input image by summing\npixel values across one axis (vertical profile). It then scales the \nprofile to the range [0, 1] and visualizes it. Additionally, vertical \nlines are drawn at specific x-coordinates to represent the position\nof different classes of nanoparticles. The colors of the vertical lines \ncorrespond to different particle classes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>im</strong> (ndarray):\nA 2D numpy array representing the simulated image of nanoparticles.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong>: Displays a plot of the 1D profile of the nanoparticle simulation \nand marks particle positions based on their class.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">im</span>, </span><span class=\"param\"><span class=\"n\">clss</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.simuParticles.dataGenerator.save_outputs", "modulename": "myimg.apps.simuParticles", "qualname": "dataGenerator.save_outputs", "kind": "function", "doc": "<p>Save simulated data and image to specified paths.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (pandas.DataFrame):\nDataFrame containing the simulated data.</li>\n<li><strong>image</strong> (numpy.ndarray):\nImage array to be saved.</li>\n<li><strong>path</strong> (str, optional):\nDirectory path where the files will be saved. \nDefaults to the current working directory.</li>\n<li><strong>dfFile</strong> (str, optional):\nFilename for saving the DataFrame. Default is \"dfSimu.pkl\".</li>\n<li><strong>imFile</strong> (str, optional):\nFilename for saving the image. Default is \"imSimu.png\".</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">dfFile</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">imFile</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.apps.simuParticles.dataGenerator.load_data", "modulename": "myimg.apps.simuParticles", "qualname": "dataGenerator.load_data", "kind": "function", "doc": "<p>Load simulated data and image from specified files.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (str):\nDirectory path where the files are stored.</li>\n<li><strong>dfFile</strong> (str, optional):\nFilename for the DataFrame containing nanoparticle data. \nDefault is \"dfSimu.pkl\".</li>\n<li><strong>imFile</strong> (str, optional):\nFilename for the image file. Default is \"imSimu.png\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>data</strong> (pandas.DataFrame):\nLoaded DataFrame containing the nanoparticle data.</li>\n<li><strong>image</strong> (numpy.ndarray):\nLoaded image as a NumPy array.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">dfFile</span><span class=\"o\">=</span><span class=\"s1\">&#39;dfSimu.pkl&#39;</span>, </span><span class=\"param\"><span class=\"n\">imFile</span><span class=\"o\">=</span><span class=\"s1\">&#39;imSimu.png&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects", "modulename": "myimg.objects", "kind": "module", "doc": "<h2 id=\"module-myimgobjects\">Module: myimg.objects</h2>\n\n<p>Key classes/objects for myimg package:</p>\n\n<ol>\n<li><em>MyImage</em> class\ndefines the basic MyImg object,\nwhich is used in most image manipulations.</li>\n<li><em>Montage</em> class\ndefines a set/montage of images,\nwhich are arranged in a rectangular tiled image.</li>\n<li><em>Units</em>, <em>NumberWithUnits</em> and <em>ScaleWithUnits</em> classes\ndefines allowed units, number-with-units and scale-with-units, respectively.</li>\n</ol>\n\n<h2 id=\"examples-how-does-it-work\">Examples = how does it work?</h2>\n\n<p><strong>MyImage</strong> class creates the basic object,\nwhich is used in most image manipulations within myimg.api module.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># MyImage class :: simple example (short but real)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimg.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>        <span class=\"c1\"># import MyImage API ~ simple UI</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyImage</span><span class=\"p\">(</span><span class=\"s1\">&#39;some.bmp&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># open image: some.bmp</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span>                <span class=\"c1\"># insert a label in the upper left corner</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">(</span><span class=\"s1\">&#39;rwi,100um&#39;</span><span class=\"p\">)</span>     <span class=\"c1\"># insert a scalebar to the lower right corner</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">save_with_ext</span><span class=\"p\">(</span><span class=\"s1\">&#39;_s.png&#39;</span><span class=\"p\">)</span>   <span class=\"c1\"># save the modified image to: some_ls.png</span>\n</code></pre>\n</div>\n\n<p><strong>MyReport</strong> class creates the multi-image object,\nwhich contains several images arranged in a rectangular grid.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># MyReport class :: simple example (short but real)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimg.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>        <span class=\"c1\"># import MyImage API ~ simple UI</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">images</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;s1.png&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;s2.png&#39;</span><span class=\"p\">]</span>  <span class=\"c1\"># define input images</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mrep</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyReport</span><span class=\"p\">(</span><span class=\"n\">images</span><span class=\"p\">,</span>    <span class=\"c1\"># create montage image</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"c1\"># ...grayscale, just two images in a row</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>               <span class=\"c1\"># ...padding/spacing between imgs = 10pixels</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mrep</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">&#39;mreport.png&#39;</span><span class=\"p\">)</span>      <span class=\"c1\"># save the final montage of (the two) images   </span>\n</code></pre>\n</div>\n\n<p><strong>Units</strong>, <strong>NumberWithUnits</strong>, and <strong>ScaleWithUnits</strong> classes\nare used in myimg.utils.scalebar module\nwhen creating scalebars (as a scalebar contains <em>number with units</em>).\nMore information can be found below at the definitions of\nmyimg.objects.Units, myimg.objects.NumberWithUnits,\nand myimg.objects.ScaleWithUnits.</p>\n"}, {"fullname": "myimg.objects.MyImage", "modulename": "myimg.objects", "qualname": "MyImage", "kind": "class", "doc": "<p>Class defining MyImage objects.</p>\n"}, {"fullname": "myimg.objects.MyImage.__init__", "modulename": "myimg.objects", "qualname": "MyImage.__init__", "kind": "function", "doc": "<p>Initialize MyImage object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong> (image (array or str or path-like or MyImage object)):\nName of the array/image that we want to open.</li>\n<li><strong>pixsize</strong> (str, optional, default is None):\nDescription how to determine pixel size.\nPixel size is needed to calculate the scalebar length.\nSee docs of myimg.objects.MyImage.scalebar for more details.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MyImage object</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">pixsize</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "myimg.objects.MyImage.img_from_file", "modulename": "myimg.objects", "qualname": "MyImage.img_from_file", "kind": "function", "doc": "<p>Create PIL.Image object from an image file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str):\nName of the file to open.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>img</strong> (PIL image object):\nThe PIL image object is usually saved in MyImage object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.img_from_array", "modulename": "myimg.objects", "qualname": "MyImage.img_from_array", "kind": "function", "doc": "<p>Create PIL.Image object from an array.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arr</strong> (numpy array):\nName of the array that should be opened as PIL.Image object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>img</strong> (PIL image object):\nThe PIL image object is usually saved in MyImage object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.set_image_type", "modulename": "myimg.objects", "qualname": "MyImage.set_image_type", "kind": "function", "doc": "<p>Set the image type.</p>\n\n<p>This method gets the image type\nAND converts some less common image type to more standard ones.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Image type</strong>: We use image types: 'binary', 'gray', 'gray16', 'rgb', 'rgba'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.set_scale", "modulename": "myimg.objects", "qualname": "MyImage.set_scale", "kind": "function", "doc": "<p>Set scale = define the pixel size.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pixsize</strong> (str):\nDescription how to determine pixel size.\nPixel size is needed to calculate the scalebar length.\nSee docs of myimg.objects.MyImage.scalebar for more details.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The result is the defined pixel size,\nsaved in the attribute pixsize of myimg.objects.MyImage object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pixsize</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.set_font_size", "modulename": "myimg.objects", "qualname": "MyImage.set_font_size", "kind": "function", "doc": "<p>Set font size (in fontsize units)\ncorresponding to <em>required_font_size_in_pixels</em>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fontname</strong> (str):\nName of the TrueType font to use.\nExample (working in Windows): font_name='timesbd.ttf'</li>\n<li><strong>required_font_size_in_pixels</strong> (float):\nRequired font size in pixels.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>font_size</strong> (int):\nFinal font size (in font units).\nIf the returned <em>font_size</em> (in fontsize units)\nis applied to font with given <em>fontname</em>,\nthen the height of the font (in pixels units)\nwill correspond to <em>required_font_size_in_pixels</em> argument.</li>\n</ul>\n\n<h6 id=\"technical-notes\">Technical notes</h6>\n\n<ul>\n<li>This function is a modified recipe from StackOverflow:\n<a href=\"https://stackoverflow.com/q/4902198\">https://stackoverflow.com/q/4902198</a></li>\n<li>My modification may be a bit slower (not too much)\nbut it seems to be clear and reliable.</li>\n<li>The function is employed in external functions\nwhich insert label and/or scalebar to MyImage object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">font_name</span>, </span><span class=\"param\"><span class=\"n\">required_font_size_in_pixels</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.to_gray", "modulename": "myimg.objects", "qualname": "MyImage.to_gray", "kind": "function", "doc": "<p>Convert image to grayscale.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>itype</strong> (str, optional, default is '8bit'):\nThe image is converted to 8bit grayscale.\nOnly the standard 8bit grayscale images are supported now.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The output is saved in self.img.</li>\n</ul>\n\n<h6 id=\"technical-notes\">Technical notes</h6>\n\n<ul>\n<li>We fully support only 8-bit grayscale images;\nthe same situation is in Pillow (full support only for 8-bit gray).</li>\n<li>Working with 16-bit grayscale images is surprisingly tricky.\nYou <em>can</em> read and work with 16-bit images,\nbut before using some methods of this package\n(such as label, scalebar, montage),\nthey <em>should</em> be converted to 8-bit grayscale\nin order to avoid errors or strange results.</li>\n<li>This method can convert\nthe standard 16-bit grayscale to the 8-bit grayscale,\nbut it does not support other, less common grayscale formats.</li>\n<li>The less common grayscale formats can be normalized and converted\nto 8-bit grayscale manually, in an analogous way as in this method.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;8bit&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.to_rgb", "modulename": "myimg.objects", "qualname": "MyImage.to_rgb", "kind": "function", "doc": "<p>Convert image to RGB.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>itype</strong> (str, optional, default is '24bit'):\nThe image is converted to standard RGB image = 24bit = 3*8bit.\nOnly the standard 24bit RGB images are supported at the moment.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: Te output is saved in self.img.</li>\n</ul>\n\n<h6 id=\"technical-notes\">Technical notes</h6>\n\n<ul>\n<li>Standard RGB format = 24bit RGB = 8 bits for each of (R,G,B) values.</li>\n<li>Other (non-standard) RGB formats are not supported at the moment.</li>\n<li>RGB formats: <a href=\"https://en.wikipedia.org\">https://en.wikipedia.org</a> -> RGB color formats</li>\n<li>Pillow: <a href=\"https://pillow.readthedocs.io\">https://pillow.readthedocs.io</a> -> Handbook - Concepts - Modes</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;24bit&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.to_rgba", "modulename": "myimg.objects", "qualname": "MyImage.to_rgba", "kind": "function", "doc": "<p>Convert image to RGBA.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>itype</strong> (str, optional, default is '32bit'):\nThe image is converted to standard RGBA image = 32bit = 3*8+8bit.\nOnly the standard 32bit RGBA images are supported at the moment.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: Te output is saved in self.img.</li>\n</ul>\n\n<h6 id=\"technical-notes\">Technical notes</h6>\n\n<ul>\n<li>Standard RGBA format = 32bit RGBA = 8bits (R,G,B) + 8bit alpha.</li>\n<li>Other (non-standard) RGB formats are not supported at the moment.</li>\n<li>RGB formats: <a href=\"https://en.wikipedia.org\">https://en.wikipedia.org</a> -> RGB color formats</li>\n<li>Pillow: <a href=\"https://pillow.readthedocs.io\">https://pillow.readthedocs.io</a> -> Handbook - Concepts - Modes</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;32bit&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.cut", "modulename": "myimg.objects", "qualname": "MyImage.cut", "kind": "function", "doc": "<p>Cut off lower bar with given height.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>height_of_bar</strong> (int):\nHeight of the lower bar to cut.\nLower bars are typical of many microscopic images.\nA lower bar contains information from given microscope,\nbut it is usually removed when preparing the image for publication.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The output is saved in self.img.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">height_of_bar</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.crop", "modulename": "myimg.objects", "qualname": "MyImage.crop", "kind": "function", "doc": "<p>Crop image = keep just selected rectangular area.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rectangle</strong> (tuple of four integers):\nTuple (X1,Y1,X2,Y2),\nwhere X1,Y1 = coordinates of upper left corner\nand X2,Y2 = coordinates of lower right corner.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The output is saved in <em>self.img</em>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rectangle</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.resize", "modulename": "myimg.objects", "qualname": "MyImage.resize", "kind": "function", "doc": "<p>Resize image to new width or height, keeping the aspect ratio.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>width</strong> (int, optional, default is None):\nThe required width of the resized image.\nThe height will be calculated\nso that the aspect ratio was preserved.</li>\n<li><strong>height</strong> (int, optional, default is None):\nThe required height of the resized image.\nThe width will be calculated\nso that the aspect ratio was preserved.</li>\n<li><strong>resample</strong> (int or None):\nIf None, default resampling filter is used (usually Ok).\nIt is also possible to define a specific resampling filter.\nFor sharp images or plots we may prefer no resampling and \nwe can use <em>resampling = 0 = Image.Resampling.NEAREST</em>.\nMore: <a href=\"https://pillow.readthedocs.io\">https://pillow.readthedocs.io</a> -> Reference -> Image -> resize</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The output is saved in <em>self.img</em></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">height</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">resample</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.autocontrast", "modulename": "myimg.objects", "qualname": "MyImage.autocontrast", "kind": "function", "doc": "<p>Enhance image contrast (using PIL.ImageOps.autocontrast function).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>**kwargs</strong> (dict):\nAny arguments of PIL.ImageOps.autocontrast function.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The modified image is saved in self.img object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.border", "modulename": "myimg.objects", "qualname": "MyImage.border", "kind": "function", "doc": "<p>Draw a border around an image. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>border</strong> (int or tuple, optional, default is 1):\nInt = the same thickness of border around all four edges.\nTuple of 2 ints = (left/righ and top/bottom) border sizes.\nTuple of 4 ints = (left, top, right, bottom) border sizes.</li>\n<li><strong>color</strong> (PIL color specification, default is 'black'):\nA short text that will be inserted at the bottom of an image.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">border</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.label", "modulename": "myimg.objects", "qualname": "MyImage.label", "kind": "function", "doc": "<p>Insert a one-letter label in the upper left corner of an image. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>label</strong> (str):\nOne letter label that will be inserted in the upper left corner.</li>\n<li><strong>F</strong> (float, optional, default is None):\nMultiplication coefficient/factor that changes the label size.\nIf F = 1.2, then all label parameters are enlarged 1.2 times.</li>\n<li><strong>kwargs</strong> (list of keyword arguments):\nAllowed keyword arguments are:\ncolor, bcolor, position, stripes, messages.\nSee section <em>List of allowed kwargs</em> for detailed descriptions.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The label is drawn directly to <em>self.img</em>.</li>\n</ul>\n\n<h6 id=\"list-of-allowed-kwargs\">List of allowed kwargs</h6>\n\n<ul>\n<li>color : PIL color specification, default is 'black'.\nText color = color of the label text.\nThe default is defined in myimg.settings.Caption\n(and that is why it does not have to be re-defined here).</li>\n<li>bcolor : PIL color specification, default is 'white'.\nBackground color = color of the label background/box.\nThe default is defined in myimg.settings.Caption\n(and that is why it does not have to be re-defined here).</li>\n</ul>\n\n<h6 id=\"technical-notes\">Technical notes</h6>\n\n<ul>\n<li>Transparent background:\nTo set transparent background,\nset optional/keyword argument bcolor='transparent'.\nIt is not enough to omit bcolor,\nbecause all omitted keyword arguments\nare set to their defaults defined in Settings.Label.\nIn the case of omitted bcolor argument, the default is 'white'. </li>\n<li>Color label in grayscale image:\nTo set color label in grayscale image,\nit is necessary to convert image to RGB;\notherwise the colored label would be converted to grayscale.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">label</span>, </span><span class=\"param\"><span class=\"n\">F</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.caption", "modulename": "myimg.objects", "qualname": "MyImage.caption", "kind": "function", "doc": "<p>Insert a one-line textual description at the bottom of an image. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>text</strong> (str):\nA short text that will be inserted at the bottom of an image.</li>\n<li><strong>F</strong> (float, optional, default is None):\nMultiplication coefficient/factor that changes the text size.\nIf F = 1.2, then all label parameters are enlarged 1.2 times.</li>\n<li><strong>kwargs</strong> (list of keyword arguments):\nAllowed keyword arguments are:\ncolor, bcolor, messages.\nSee section <em>List of allowed kwargs</em> for detailed descriptions.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The label is drawn directly to <em>self.img</em>.</li>\n</ul>\n\n<h6 id=\"list-of-allowed-kwargs\">List of allowed kwargs</h6>\n\n<ul>\n<li>color : PIL color specification, default is 'black'.\nText color = color of the label text.\nThe default is defined in myimg.settings.Caption\n(and that is why it does not have to be re-defined here).</li>\n<li>bcolor : PIL color specification, default is 'white'.\nBackground color = color of the label background/box.\nThe default is defined in myimg.settings.Caption\n(and that is why it does not have to be re-defined here).</li>\n<li>align : int or str\nThis parameter determines the alignment of the figure caption.\nIf align = integer,\nx_position of the caption is {align} pixels from left.\nIf align = string,\nit can be either 'left' or 'Left' or ''</li>\n</ul>\n\n<h6 id=\"technical-notes\">Technical notes</h6>\n\n<ul>\n<li>Transparent background:\nTo set transparent background,\nset optional/keyword argument bcolor='transparent'.\nIt is not enough to omit bcolor,\nbecause all omitted keyword arguments\nare set to their defaults defined in Settings.Label.\nIn the case of omitted bcolor argument, the default is 'white'. </li>\n<li>Color label in grayscale image:\nTo set color label in grayscale image,\nit is necessary to convert image to RGB;\notherwise the colored label would be converted to grayscale.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span>, </span><span class=\"param\"><span class=\"n\">F</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.scalebar", "modulename": "myimg.objects", "qualname": "MyImage.scalebar", "kind": "function", "doc": "<p>Insert a scalebar in the lower right corner of the image.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pixsize</strong> (str, optional, default is None):\nDescription how to determine pixel size.\nPixel size is needed to calculate the scalebar length.\nSee <em>Example</em> section below to see available options.\nIf pixsize is None, it is taken from self.pixsize.\nIf pixsize is None and self.pixsize is not defined - error, exit.</li>\n<li><strong>F</strong> (float, optional, the default is None):\nMultiplication coefficient/factor that changes the scalebar size.\nIf F = 1.2, then all scalebar parameters are enlarged 1.2 times.</li>\n<li><strong>kwargs</strong> (list of keyword arguments):\nAllowed keyword arguments are:\ncolor, bcolor, position, stripes, messages.\nSee section <em>List of allowed kwargs</em> below for more info.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The scalebar is drawn directly to <em>self.img</em>.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Example 1 :: Four basic options HOW to define pixelsize + scalebar</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Example 1 :: 4 basic options HOW to define pixsize + scalebar</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimg.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyImage</span><span class=\"p\">(</span><span class=\"s1\">&#39;some.png&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Option 1: real-width-of-image</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (here: rwi = 100 micrometers</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">(</span><span class=\"s1\">&#39;rwi,100um&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Option 2: known-length-in-image</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (here: known length of 100 nm = 220 pixels        </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">(</span><span class=\"s1\">&#39;knl,100nm,220&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Option 3: calibrated microscope + magnification</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (here: microscope LM_Nikon1 + magnification 20x     </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">(</span><span class=\"s1\">&#39;mag,LM_Nikon1,20x&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Option 4: microscope with description files</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (here: microscope MAIA3, which gives micrographs with BHD-files</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">(</span><span class=\"s1\">&#39;txt,MAIA3)</span>\n</code></pre>\n</div>\n\n<p>Example 2 :: Three basic ways WHEN we can define pixelsize + scalebar</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Example 2 :: 3 basic ways WHEN we can define pixsize + scalebar</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimg.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># 1st way: when we insert the scalebar</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyImage</span><span class=\"p\">(</span><span class=\"s1\">&#39;some.png&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">(</span><span class=\"s1\">&#39;rwi,100um&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># 2nd way: when we read the input image</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyImage</span><span class=\"p\">(</span><span class=\"s1\">&#39;some.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">pixsize</span><span class=\"o\">=</span><span class=\"s1\">&#39;rwi,100um&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># 3rd way: after reading of the input image, using set_scale</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyImage</span><span class=\"p\">(</span><span class=\"s1\">&#39;some.png&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">set_scale</span><span class=\"p\">(</span><span class=\"s1\">&#39;rwi,100um&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>Example 3 :: Four basic ways how to insert a scalebar in more detail</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Example 3 :: 4 basic ways HOW to insert a scalebar IN MORE DETAIL</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (this is a model example; in real life, we use just one way)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (0) Import api + read image</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimage.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyImage</span><span class=\"p\">(</span><span class=\"s1\">&#39;../IMG/image123_20kx.bmp&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (1) Pixel size from real width of image = 100um</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">(</span><span class=\"s1\">&#39;rwi,100um&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (2) Pixel size from a known length in image =&gt; 50 nm = 202 pixels</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">(</span><span class=\"s1\">&#39;knl,50nm,202&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (3) Pixel size from known magnification</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (note: this can be done only for calibrated microscope</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (calibrated microscopes =&gt; myimg.settings.MicCalibrations</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (3a) magnification deduced from last part of image name</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (note: mag = everything between last underscore and suffix</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (in this example we have: ../IMG/image123_20kx.bmp =&gt; mag = 20kx</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">(</span><span class=\"s1\">&#39;mag,TecnaiVeleta&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (3b) magnification inserted directly</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (note: mag can be something like 20kx, 20k, 20000x, 20000</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">(</span><span class=\"s1\">&#39;mag,TecnaiVeleta,20kx&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (4) Pixel size from accompanying text file</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (note: some microscopes save images + descriptive txt files</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (the format of text file must be described somehow</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (description of text files =&gt; myimg.settings.MicDescriptionFiles</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">(</span><span class=\"s1\">&#39;txt,MAIA3&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"list-of-allowed-kwargs\">List of allowed kwargs</h6>\n\n<ul>\n<li>color : PIL color specification, default is 'black'.\nText color = color of the scalebar text and line.</li>\n<li>bcolor : PIL color specification, default is 'white'.\nBackground color = color of the scalebar background/box.</li>\n<li>length : str, default is None.\nIf length is given (using a string such as '100um','1.2nm')\nthen the lenght fixed at given value and not calculated by the\nprogram (calculation would yield some reasonable lenght of\nscalebar around 1/6 of the image width; this default is saved\nin myimg.settings.Scalebar.length property - which can be changed).</li>\n<li>position : list or tuple or None, default is None.\nIf position = None, the scalebar is drawn\nat the default position in the lower-right corner of the image.\nIf position = (X,Y) = list or tuple of two integers,\nthe scalebar is drawn at position X,Y of the image.</li>\n<li>stripes : bool or int, default is False.\nIf stripes = False, draw standard scalebar.\nIf stripes = True or 1, draw scalebar with 5 stripes.\nIf stripes = N, where N>=2, draw striped scalebar with N stripes.</li>\n<li>messages : bool, default is False.\nIf messages=True, print info about program run.</li>\n</ul>\n\n<h6 id=\"technical-notes\">Technical notes</h6>\n\n<ul>\n<li>Transparent background:\nTo set transparent background,\nset optional/keyword argument bcolor='transparent'.\nIt is not enough to omit bcolor,\nbecause all omitted keyword arguments\nare set to their defaults defined in Settings.Scalebar.\nIn the case of omitted bcolor argument, the default is 'white'. </li>\n<li>Color scalebar in grayscale image:\nTo set color label in grayscale image,\nit is necessary to convert image to RGB;\notherwise the colored label would be converted to grayscale.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pixsize</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">F</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.show", "modulename": "myimg.objects", "qualname": "MyImage.show", "kind": "function", "doc": "<p>Show image.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cmap</strong> (matplotlib colormap name, optional, default is None):\nMatplotlib colormap name.\nIf omitted and we have grayscale image, then we use cmap=gray.</li>\n<li><strong>axes</strong> (bool, optional, default is False):\nIf axes=False (default), do not show axes around the image.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The output is the image shown on the screen.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">iscale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.save", "modulename": "myimg.objects", "qualname": "MyImage.save", "kind": "function", "doc": "<p>Save image using arbitrary output dir, name and extension.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_image</strong> (str or path-like object):\nFilename of the output image.\nThe format of saved image is guessed from the extension.</li>\n<li><strong>dpi</strong> (int, optional, default is 300):\nThe dpi of the saved image.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The output is the saved *output_image*.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">output_image</span>, </span><span class=\"param\"><span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"mi\">300</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyImage.save_with_extension", "modulename": "myimg.objects", "qualname": "MyImage.save_with_extension", "kind": "function", "doc": "<p>Save image in the same dir with slightly modified name and extension.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>my_extension</strong> (str):\nSpecific extension of the output image.\nThe argument my_extension can extend image name\n<ul>\n<li>modify image extension/format;\nsee the example below.</li>\n</ul></li>\n<li><strong>dpi</strong> (int, optional, default is 300):\nThe dpi of the saved image.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The output is the saved output image with *my_extension*.</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimage.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Open image</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyImage</span><span class=\"p\">(</span><span class=\"s1\">&#39;../IMG/somefile.bmp&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Cut off lower bar </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">cut</span><span class=\"p\">(</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Save the image as: &#39;../IMG/somefile_cut.png&#39;)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">save_with_ext</span><span class=\"p\">(</span><span class=\"s1\">&#39;_cut.png&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">my_extension</span>, </span><span class=\"param\"><span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"mi\">300</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyReport", "modulename": "myimg.objects", "qualname": "MyReport", "kind": "class", "doc": "<p>Class defining MyReport objects.</p>\n"}, {"fullname": "myimg.objects.MyReport.__init__", "modulename": "myimg.objects", "qualname": "MyReport.__init__", "kind": "function", "doc": "<p>Initialize MyReport object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>images</strong> (list of images (arrays or str or path-like or MyImage objects)):\nThe list of images from which the MyReport will be created.\nIf {images} list consists of arrays,\nwe assume that these arrays are the direct input to\nskimage.util.montage method.\nIf {images} list contains of strings or path-like objects,\nwe assume that these are filenames of images\nthat should be read as arrays.\nIf {images} lists contains MyImage objecs,\nwe use MyImage objects to create the final MyReport/montage.</li>\n<li><strong>itype</strong> (type of images/arrays ('gray' or 'rgb' or 'rgba')):\nThe type of input/output images/arrays.\nIf itype='gray',\nthen the input/output are converted to grayscale.\nIf itype='rgb' or 'rgba'\nthen the input/output are treated as RGB or RGBA images/arrays.</li>\n<li><strong>grid</strong> (tuple of two integers (number-of-rows, number-of-cols)):\nThis argument is an equivalent of\n<em>grid_shape</em> argument in skimage.util.montage function.\nIt defines the number-of-rows and number-of-cols of the montage.\nNote: If grid is None, it defaults to a suitable square grid.</li>\n<li><strong>padding</strong> (int; the default is 0):\nThis argument is an equivalent of\n<em>padding_width</em> argument in skimage.util.montage function.\nIt defines the distance between the images/arrays of the montage.</li>\n<li><strong>fill</strong> (str or int or tuple/list/array; the default is 'white'):\nThis argument is a (slightly extended) equivalent of \n<em>fill</em> argument in skimage.util.montage function.\nIt defines the color between the images/arrays.\nIf fill='white' or fill='black',\nthe color among the images/arrays is white or black.\nIt can also be an integer value (for grayscale images)\nor a three-value tuple/list/array (for RGB images);\nin such a case, it defines the exact R,G,B color among the images.</li>\n<li><strong>crop</strong> (bool; the default is True):\nIf crop=True, the outer padding is decreased to 1/2*padding.\nThis makes the montages nicer (like the outputs from ImageMagick).</li>\n<li><strong>rescale</strong> (float; the default is None):\nIf <em>rescale</em> is not None, then the original size\nof all input images/arrays is multiplied by <em>rescale</em>.\nExample: If <em>rescale</em> = 1/2, then the original size\nof all input images/arrays is halved (reduced by 50%).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MyReport object</strong>: Multi-image = tiled image composed of <em>images</em>.\nThe MyReport object can be shown (MyReport.show)\nor saved (MyReport.save).</li>\n</ul>\n\n<h6 id=\"technical-notes\">Technical notes</h6>\n\n<ul>\n<li>Only 'gray', 'rgb', and 'rgba' standard formats are supported.\nIf an image has some non-standard format,\nit can be read and converted using a sister MyImage class\n(methods MyImage.to_gray, MyImage.to_rgb, MyImage.to_rgba).</li>\n<li>The user does not have to differentiate 'rgb' and 'rgba' images.\nIt is enough to specify 'rgb' for color images\nand if the images are 'rgba', the program can work with them.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">images</span>,</span><span class=\"param\">\t<span class=\"n\">itype</span>,</span><span class=\"param\">\t<span class=\"n\">grid</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">fill</span><span class=\"o\">=</span><span class=\"s1\">&#39;white&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">crop</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">rescale</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "myimg.objects.MyReport.process_images", "modulename": "myimg.objects", "qualname": "MyReport.process_images", "kind": "function", "doc": "<p>Check and prepare images before creating MyReport/montage.</p>\n\n<ul>\n<li>The images used for MyReport/montage\nshould be convertible to arrays with the same type and size.</li>\n<li>This method goes through all images in self.images\nand converts them to arrays.</li>\n<li>If the converted images/arrays have the same dimensions(=type),\nthen everything is Ok\nand we cen proceed.</li>\n<li><p>If the conerted images/arrays do not have the same dimension(=type),\n then this methods ends with an error\n and the user has to adjust images BEFORE calling the montage method.</p>\n\n<p>Returns</p></li>\n</ul>\n\n<hr />\n\n<p>None\n     If everything is Ok,\n     the checked images are read and saved as arrays in the self.images.\n     If the images are not of the same type\n     this method prints an error and the program quits.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyReport.check_image_types", "modulename": "myimg.objects", "qualname": "MyReport.check_image_types", "kind": "function", "doc": "<p>Check image/array types and prepare additional parametrs for montage.</p>\n\n<ul>\n<li>The only allowed image types are 'rgb' and 'gray'.</li>\n<li>Other image types =&gt; print error message and exit program.</li>\n<li>For each image type we have to set two additional montage params:\n<ul>\n<li>self.montage_channel_axis =&gt; the last axis of the array</li>\n<li>self.montage_number_of_channels =&gt; gray ~ 1, rgb ~ 3, rgba ~ 4</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The additional montage parameters are are saved in\nself.montage_channel_axes and self.montage_number_of_channels.\nThese parameters are needed\nfor correct treatement of rgb/gray images/arrays.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyReport.rescale_images", "modulename": "myimg.objects", "qualname": "MyReport.rescale_images", "kind": "function", "doc": "<p>Rescale input images/arrays if requested.</p>\n\n<ul>\n<li>The images are rescaled if self.rescale != None.</li>\n<li>This rescaling should be applied to each of self.images\nAFTER the images have been checked and converted to arrays.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The rescaled images/arrays are saved in self.images.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyReport.show", "modulename": "myimg.objects", "qualname": "MyReport.show", "kind": "function", "doc": "<p>Show MyReport = rectangular montage of images.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cmap</strong> (matplotlib colormap name, optional, default is None):\nMatplotlib colormap name.\nIf omitted and we have grayscale image, then we use cmap=gray.</li>\n<li><strong>axes</strong> (bool, optional, default is False):\nIf axes=False (default), do not show axes around the image.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The output is the MyReport (image montage) shown on the screen.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.MyReport.save", "modulename": "myimg.objects", "qualname": "MyReport.save", "kind": "function", "doc": "<p>Save MyReport (using an arbitrary path, name and extension).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_image</strong> (str or path-like object):\nFilename of the output image.\nThe format of saved image is guessed from the extension.</li>\n<li><strong>dpi</strong> (int, optional, default is 300):\nThe dpi of the saved image/montage.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The output is the saved *output_image*.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">output_image</span>, </span><span class=\"param\"><span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"mi\">300</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.Units", "modulename": "myimg.objects", "qualname": "Units", "kind": "class", "doc": "<p>Data class: just a container for the following two dataclasses.</p>\n\n<ul>\n<li>The sub-dataclasses are used in NumberWithUnits/ScaleWithUnits objects.</li>\n<li>The units definitions are fixed, the users should not change them.</li>\n<li>The correct units (Lenghts or RecLenghts) are guessed\nduring NumberWithUnits/ScaleWithUnits object initialization.\nExample: If <code>nwu = NumberWithUnits('2um')</code>, then we use <code>Units.Lenghts</code>.</li>\n</ul>\n"}, {"fullname": "myimg.objects.Units.Lengths", "modulename": "myimg.objects", "qualname": "Units.Lengths", "kind": "class", "doc": "<p>Data class: length units (and their ratios) for micrographs.</p>\n"}, {"fullname": "myimg.objects.Units.RecLengths", "modulename": "myimg.objects", "qualname": "Units.RecLengths", "kind": "class", "doc": "<p>Data class: reciprocal lenght units (and their ratios).</p>\n\n<ul>\n<li>Reminder: reciprocal lenghts are used in diffractograms</li>\n<li>Here: rust a pair of units that are employed in real life: 1/nm, 1/A</li>\n</ul>\n"}, {"fullname": "myimg.objects.NumberWithUnits", "modulename": "myimg.objects", "qualname": "NumberWithUnits", "kind": "class", "doc": "<p>Class defining NumberWithUnits object.</p>\n\n<ul>\n<li>NumberWithUnits object = number + units.</li>\n<li>The numbers-with-units are used for pixel sizes or scalebars.</li>\n</ul>\n\n<p>Object initialiation</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Three basic ways how to initialize a NumberWithUnits object</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (this is a NON-typical usage</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (NumberWithUnits object is used internally, when drawing scalebars</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">myimg.nwu</span> <span class=\"kn\">import</span> <span class=\"n\">NumberWithUnits</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nwu1</span> <span class=\"o\">=</span> <span class=\"n\">NumberWithUnits</span><span class=\"p\">(</span><span class=\"s1\">&#39;1.2um&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nwu2</span> <span class=\"o\">=</span> <span class=\"n\">NumberWithUnits</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"o\">=</span><span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s1\">&#39;um&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nwu3</span> <span class=\"o\">=</span> <span class=\"n\">NumberWithUnits</span><span class=\"p\">(</span><span class=\"n\">a_number_with_units_object_such_as_nwu1</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>List of object properties</p>\n\n<ul>\n<li>number = number/numeric value</li>\n<li>units = units corresponding to number</li>\n<li>_units_description = myimg.settings.Units subclass, private property</li>\n</ul>\n\n<p>Object methods</p>\n\n<ul>\n<li>text = return number-with-units as string</li>\n<li>units_Ok = test if the defined units are correct</li>\n<li>index_of_units = index of units in units_description.units list</li>\n<li>increase_units = increase units and modify number accordingly</li>\n<li>decrease_units = decrease units and modify number accordingly</li>\n<li>set_units_to = set units to given units and modify number accordingly</li>\n<li>set_correct_units = set units so that the number was within &lt;1,1000)</li>\n</ul>\n"}, {"fullname": "myimg.objects.NumberWithUnits.__init__", "modulename": "myimg.objects", "qualname": "NumberWithUnits.__init__", "kind": "function", "doc": "<p>Initialize NumberWithUnits object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>number</strong> (float or str or NumberWithUnits object):\nNumber with (or without) units, which can be:\n(i) Number (float; such as: 100),\nbut then the 2nd argument should be given (such as units='um'). \n(ii) String (str; such as: '100 um' or '1.2nm').\n(iii) Another NumberWithUnits object;\nin such a case we receive the copy of the argument.</li>\n<li><strong>units</strong> (str, optional, the default is None):\nIf the 1st argument (number) is a float, the 2nd argument (units)\ndefines units of the first argument.\nIf the 1st argument is string or NumberWithUnits object,\nthe 2nd argument is ignored.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>NumberWithUnits object</strong>: NumberWithUnits object contains:\n(i) numerical value (NumberWithUnits.number),\n(ii) corresponding units (NumberWithUnits.units), and\n(iii) further props/methods (NumberWithUnits.change_units ...).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">number</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">units</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "myimg.objects.NumberWithUnits.text", "modulename": "myimg.objects", "qualname": "NumberWithUnits.text", "kind": "function", "doc": "<p>Return number + units as string.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong> (number-with-units):\nThe method returns the saved number with units as string.\nExample: if self.number = 1.2 and self.units = nm, we get '1 nm'.\nThe units are printed in unicode (important for um and agstrems).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.NumberWithUnits.units_Ok", "modulename": "myimg.objects", "qualname": "NumberWithUnits.units_Ok", "kind": "function", "doc": "<p>Test if current units are correct.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>units</strong> (str, optional, the default is None):\nIf units='something', then 'something' is compared\nwith the list of allowed units for self = NumberWithUnits object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if the units are correct and False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">units</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.NumberWithUnits.index_of_units", "modulename": "myimg.objects", "qualname": "NumberWithUnits.index_of_units", "kind": "function", "doc": "<p>Get index of current or specified units.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>units_to_check</strong> (str, optional, default is None):\nAny string representing some units.\nIf units_to_check is not given,\nthe method check current units of self object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: Index of current or specified units.\nIf units = 'um' then index_of_units = 2,\nbecause Units.Lenghts.units = ('m', 'mm', 'um', 'nm', 'A'),\nwhich means: 'm' =&gt; 0, 'mm' =&gt; 1, 'um' =&gt; 2...</li>\n</ul>\n\n<h6 id=\"note\">Note</h6>\n\n<p>This function is employed in further functions\nmanipulating with units, such as increase_units, decrease_units...</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">units_to_check</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.NumberWithUnits.increase_units", "modulename": "myimg.objects", "qualname": "NumberWithUnits.increase_units", "kind": "function", "doc": "<p>Increase current units (for example: um -> mm).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The result is saved in NumberWithUnits object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.NumberWithUnits.decrease_units", "modulename": "myimg.objects", "qualname": "NumberWithUnits.decrease_units", "kind": "function", "doc": "<p>Decrease current units (for example: um -> nm).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The result is saved in NumberWithUnits object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.NumberWithUnits.set_units_to", "modulename": "myimg.objects", "qualname": "NumberWithUnits.set_units_to", "kind": "function", "doc": "<p>Set units to <em>target_units</em> and modify number accordingly.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>target_units</strong> (str):\nAny string specifying valid units.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The results = changed units (and correspondingly changed number)\nare saved in NumberWithUnits object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">target_units</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.NumberWithUnits.set_correct_units", "modulename": "myimg.objects", "qualname": "NumberWithUnits.set_correct_units", "kind": "function", "doc": "<p>Set correct units, so that the number was between 1 and 1000.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The result is saved in NumberWithUnits object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.ScaleWithUnits", "modulename": "myimg.objects", "qualname": "ScaleWithUnits", "kind": "class", "doc": "<p>Class defining ScaleWithUnits object.</p>\n\n<ul>\n<li>ScaleWithUnits object = number + units + pixels.</li>\n<li>The objet defines a scalebar:\nits lenght (number,units) and length-in-pixels (pixels).</li>\n</ul>\n\n<p>Object initialiation</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Three basic ways how to initialize a ScaleWithUnits object</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (this is a NON-typical usage</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (ScaleWithUnits object is used internally, when drawing scalebars</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">myimg.nwu</span> <span class=\"kn\">import</span> <span class=\"n\">ScaleWithUnits</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">swu1</span> <span class=\"o\">=</span> <span class=\"n\">ScaleWithUnits</span><span class=\"p\">(</span><span class=\"s1\">&#39;1.2um&#39;</span><span class=\"p\">,</span> <span class=\"n\">pixels</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">swu2</span> <span class=\"o\">=</span> <span class=\"n\">ScaleWithUnits</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"o\">=</span><span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s1\">&#39;um&#39;</span><span class=\"p\">,</span> <span class=\"n\">pixels</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">swu3</span> <span class=\"o\">=</span> <span class=\"n\">ScaleWithUnits</span><span class=\"p\">(</span><span class=\"n\">a_number_with_units_object</span><span class=\"p\">,</span> <span class=\"n\">pixels</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>List of object properties</p>\n\n<ul>\n<li>number = number/numeric value</li>\n<li>units  = units corresponding to number</li>\n<li>pixels = pixels corresponding to number-with-units</li>\n<li>_units_description: myimg.settings.Units subclass, private property</li>\n</ul>\n\n<p>Object methods</p>\n\n<ul>\n<li>inherited methods from myimg.nwu.NumberWithUnits</li>\n<li>adjust_lenght_to = adjust lenght in pixels and modify number accordingly</li>\n<li>adjust_scalebar_size = adjusts scalebar lenght to some reasonable size</li>\n</ul>\n", "bases": "NumberWithUnits"}, {"fullname": "myimg.objects.ScaleWithUnits.__init__", "modulename": "myimg.objects", "qualname": "ScaleWithUnits.__init__", "kind": "function", "doc": "<p>Initialize ScaleWithUnits object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>number</strong> (float or str or NumberWithUnits object):\nNumber with (or without) units, which can be:\n(i) Number (float; such as: 100),\nbut then the 2nd argument should be given (such as units='um'). \n(ii) String (str; such as: '100 um' or '1.2nm').\n(iii) Another NumberWithUnits object;\nin such a case we receive the copy of the argument.</li>\n<li><strong>units</strong> (str, optional, the default is None):\nIf the 1st argument (number) is a float, the 2nd argument (units)\ndefines units of the first argument.\nIf the 1st argument is string or NumberWithUnits object,\nthe 2nd argument is ignored.</li>\n<li><strong>pixels</strong> (float):\nLength of scalebar in pixels.\nThis is a keyword argument that is formally optional, but in fact \nit must be specified so that the initialization made sense.\nMoreover, this argument must be specified as keyword argument,\nbecause the 2nd argument (units) is really optional and\nit may not be clear, which argument is which.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ScaleWithUnits object</strong>: NumberWithUnits object contains:\n(i) numerical value (NumberWithUnits.number),\n(ii) corresponding units (NumberWithUnits.units),\n(iii) length-of-scalebar-in-pixels and\n(iv) further props/methods (most of which\nare inherited from NumberWithUnits superclass).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">number</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">units</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">pixels</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "myimg.objects.ScaleWithUnits.text", "modulename": "myimg.objects", "qualname": "ScaleWithUnits.text", "kind": "function", "doc": "<p>Return number-with-units as string (ignoring pixels).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong> (number-with-units):\nThe method returns the saved number with units as string.\nExample: if self.number = 1.2 and self.units = nm, we get '1 nm'.\nThe units are printed in unicode (important for um and agstrems).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.ScaleWithUnits.adjust_length_to", "modulename": "myimg.objects", "qualname": "ScaleWithUnits.adjust_length_to", "kind": "function", "doc": "<p>Set lenght-of-scalebar to <em>n</em> and modify lenght-in-pixels accordingly.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n</strong> (float):\nThe new length-of-scalebar (= self.number).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The new lenght-of-scalebar and lenght-of-scalebar-in-pixels\nare saved in ScaleWithUnits.number and ScaleWithUnits.pixels\nproperties, respectively.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.objects.ScaleWithUnits.adjust_scalebar_size", "modulename": "myimg.objects", "qualname": "ScaleWithUnits.adjust_scalebar_size", "kind": "function", "doc": "<p>Set scalebar to some reasonable lenght\nand modify lenght-in-pixels accordingly.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The modified (number, units, and pixels) are saved in\nScaleWithUnits object.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<ul>\n<li>swu = 0.3 um =&gt; swu.adjust_scalebar_size() =&gt; 300 nm</li>\n<li>swu = 2.3 um =&gt; swu.adjust_scalebar_size() =&gt; 2 um</li>\n<li>swu = 456 um =&gt; swu.adjust_scalebar_size() =&gt; 500 um</li>\n<li>swu = 888 um =&gt; swu.adjust_scalebar_size() =&gt; 1 mm</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.plots", "modulename": "myimg.plots", "kind": "module", "doc": "<h2 id=\"module-myimgplots\">Module: myimg.plots</h2>\n\n<p>Auxiliary myimg module with functions for plotting</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Simple example how to employ myimg.plots</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (the module is imported and used within myimg.api</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimg.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">plots</span><span class=\"o\">.</span><span class=\"n\">set_plot_parameters</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "myimg.plots.set_plot_parameters", "modulename": "myimg.plots", "qualname": "set_plot_parameters", "kind": "function", "doc": "<p>Set global plot parameters (this is useful for repeated plotting).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>size</strong> (tuple of two floats, optional, the default is (8,6)):\nSize of the figure (width, height) in [cm].</li>\n<li><strong>dpi</strong> (int, optional, the defalut is 100):\nDPI of the figure.</li>\n<li><strong>fontsize</strong> (int, optional, the default is 8):\nSize of the font used in figure labels etc.</li>\n<li><strong>my_defaults</strong> (bool, optional, default is True):\nIf True, some reasonable additional defaults are set,\nnamely line widths and formats.</li>\n<li><strong>my_rcParams</strong> (dict, optional, default is None):\nDictionary in plt.rcParams format\ncontaining any other allowed matplotlib parameters = rcParams.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The result is a modification of the global plt.rcParams variable.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">fontsize</span><span class=\"o\">=</span><span class=\"mi\">8</span>,</span><span class=\"param\">\t<span class=\"n\">my_defaults</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">my_rcParams</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.settings", "modulename": "myimg.settings", "kind": "module", "doc": "<h2 id=\"module-myimgsettings\">Module: myimg.settings</h2>\n\n<p>Data module with default settings and calibrations for package myimg.</p>\n\n<p>The module contains several dataclasess:</p>\n\n<ul>\n<li>myimg.settings.Scalebar\n= default parameters for drawing of scalebars</li>\n<li>myimg.settings.Label\n= default parameters for drawing of image labels</li>\n<li>myimg.settings.MicCalibrations\n= class contaning the microscope calibrations</li>\n<li>myimg.settings.MicDescriptionFiles\n= class describing the microscope description files</li>\n</ul>\n"}, {"fullname": "myimg.settings.Scalebar", "modulename": "myimg.settings", "qualname": "Scalebar", "kind": "class", "doc": "<p>Default parameters of scalebars (dimensions, font, ...).</p>\n\n<ul>\n<li>most dimensions in this section = fractions of image height</li>\n<li>only default/precalculated lenght of scalebar = 1/6 * image_width</li>\n<li>default/precalculated position = lower-right corner (if position=None)</li>\n</ul>\n"}, {"fullname": "myimg.settings.Label", "modulename": "myimg.settings", "qualname": "Label", "kind": "class", "doc": "<p>Default parameters of image labels (dimensions, font, ...).</p>\n\n<ul>\n<li>all dimensions in this section = multiples of image height</li>\n<li>the default font size is similar as in the case of Scalebar</li>\n</ul>\n"}, {"fullname": "myimg.settings.Caption", "modulename": "myimg.settings", "qualname": "Caption", "kind": "class", "doc": "<p>Default parameters of image Captions (dimensions, font, ...).</p>\n\n<ul>\n<li>all dimensions in this section = multiples of image height</li>\n<li>the default font size is similar as in the case of Scalebar</li>\n</ul>\n"}, {"fullname": "myimg.settings.MicCalibrations", "modulename": "myimg.settings", "qualname": "MicCalibrations", "kind": "class", "doc": "<p>Microscope calibration constants.</p>\n\n<ul>\n<li>This dataclass is a container for several sub-dataclasses.</li>\n<li>The subdataclasses define the individual calibrated microscopes.</li>\n</ul>\n\n<p>Calculation of calibration constant for given microscope</p>\n\n<ul>\n<li>mag   = magnification, for which we know rwi</li>\n<li>rwi   = real width of image (in our case given in [mm]</li>\n<li>const = calibration constant = rwi * mag</li>\n</ul>\n\n<p>Usage of calibration constants</p>\n\n<ul>\n<li>rwi at given mag: rwi = const/mag (const = calibration constant)</li>\n<li>Warning: for EM microscopes, these relations may be just approximate</li>\n</ul>\n\n<p>Justification</p>\n\n<ul>\n<li>2x higher mag =&gt; 2x lower rwi</li>\n<li>4x higher mag =&gt; 4x lower rwi</li>\n<li>Therefore (according to elementary logic)\n<ul>\n<li>rwi = some_constant/mag</li>\n<li>const = some_constant = calibration_constant = rwi * mag</li>\n<li>physical meaning of calibration const:\nfor given microscope, const = rwi of image at mag=1x</li>\n</ul></li>\n</ul>\n\n<p>Usage of this dataclass =&gt; subclasses of this dataclass</p>\n\n<ul>\n<li>This dataclass is usually not used directly.</li>\n<li>The data are employed within the myimg package.</li>\n<li><p>Nevertheless, a short example follows:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimg.settings</span> <span class=\"k\">as</span> <span class=\"nn\">Settings</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Settings</span><span class=\"o\">.</span><span class=\"n\">MicCalibrations</span><span class=\"o\">.</span><span class=\"n\">TecnaiVeleta</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"p\">)</span>\n</code></pre>\n</div></li>\n</ul>\n"}, {"fullname": "myimg.settings.MicCalibrations.TecnaiVeleta", "modulename": "myimg.settings", "qualname": "MicCalibrations.TecnaiVeleta", "kind": "class", "doc": "<p>Calibration of Tecnai microscope with Veleta camera.</p>\n\n<ul>\n<li>Typical image size = [1024x1024]pix</li>\n<li>Alternative image sizes = integer multiples possible due to binning.</li>\n<li>Binning does not influence real-width-of-image and calibration const.</li>\n</ul>\n"}, {"fullname": "myimg.settings.MicCalibrations.LM_Nikon1", "modulename": "myimg.settings", "qualname": "MicCalibrations.LM_Nikon1", "kind": "class", "doc": "<p>Calibration of Nikon microscope with ProgRes camera.</p>\n\n<ul>\n<li>Typical image size = [1024x768]pix</li>\n<li>Alternative image sizes = integer multiples possible due to binning.</li>\n<li>Binning does not influence real-width-of-image and calibration const.</li>\n</ul>\n"}, {"fullname": "myimg.settings.MicCalibrations.LM_Nikon2", "modulename": "myimg.settings", "qualname": "MicCalibrations.LM_Nikon2", "kind": "class", "doc": "<p>Calibration of Nikon microscope with Basler camera.</p>\n\n<ul>\n<li>Typical image sizes = [2464x2056]pix, [1232x1028]pix ...</li>\n<li>Alternative image sizes = integer multiples possible due to binning.</li>\n<li>Binning does not influence real-width-of-image and calibration const.</li>\n</ul>\n"}, {"fullname": "myimg.settings.MicDescriptionFiles", "modulename": "myimg.settings", "qualname": "MicDescriptionFiles", "kind": "class", "doc": "<p>Microscope description files.</p>\n\n<ul>\n<li>Some microscopes yield micrographs <em>with</em> text description files.</li>\n<li>The description file contains additional info about the micrograph.\n<ul>\n<li>the filename is usually similar to the micrograph/image file</li>\n<li>the description file contains information about the pixel size</li>\n<li>therefore, a description file can be used\nfor the micrograph calibration</li>\n</ul></li>\n</ul>\n"}, {"fullname": "myimg.settings.MicDescriptionFiles.MAIA", "modulename": "myimg.settings", "qualname": "MicDescriptionFiles.MAIA", "kind": "class", "doc": "<p>Desription files produced by an SEM microscope MAIA.</p>\n"}, {"fullname": "myimg.settings.MicDescriptionFiles.VEGA", "modulename": "myimg.settings", "qualname": "MicDescriptionFiles.VEGA", "kind": "class", "doc": "<p>Description files produced by an SEM microscope VEGA.</p>\n"}, {"fullname": "myimg.settings.MicDescriptionFiles.JEOL", "modulename": "myimg.settings", "qualname": "MicDescriptionFiles.JEOL", "kind": "class", "doc": "<p>Description files produced by an SEM microscope JEOL.</p>\n"}, {"fullname": "myimg.utils", "modulename": "myimg.utils", "kind": "module", "doc": "<h2 id=\"subpackage-myimgutils\">Subpackage myimg.utils</h2>\n\n<p>The subpackage with code for specific/more complex utilities in myimg:</p>\n\n<ul>\n<li>myimg.utils.label = draw a label in the upper left corner of an image</li>\n<li>myimg.utils.caption = add a one-line caption at the bottom  of an image</li>\n<li>myimg.utils.scalebar = draw a scalebar in a micrograph (or diffractogram)</li>\n</ul>\n"}, {"fullname": "myimg.utils.caption", "modulename": "myimg.utils.caption", "kind": "module", "doc": "<h2 id=\"module-myimgutilscaption\">Module: myimg.utils.caption</h2>\n\n<p>This module defines function insert_caption, with the following features:</p>\n\n<ul>\n<li>The function adds a single-line caption at the bottom of an image.</li>\n<li>The function is in this separated module as it is a bit longer.</li>\n<li>The function is usually not called directly, but through myimg.api:</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Inserting caption using myimg.api interface</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimage.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyImage</span><span class=\"p\">(</span><span class=\"s1\">&#39;somefile.bmp&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># This calls myimg.utils.caption.insert_caption</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">caption</span><span class=\"p\">(</span><span class=\"s1\">&#39;This is my image.&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">save_with_ext</span><span class=\"p\">(</span><span class=\"s1\">&#39;_t.png&#39;</span><span class=\"p\">)</span> \n</code></pre>\n</div>\n\n<p>Notes to documentation:</p>\n\n<ul>\n<li>The function <em>insert_caption</em> in this module does not have a docstring,\nas it is not called directly. </li>\n<li>The docstring with detailed description of all parameters can be found\nin the calling myimg.api.MyImage.caption method.\n(the usage of the caption method is shown in the example above).</li>\n</ul>\n"}, {"fullname": "myimg.utils.iplot", "modulename": "myimg.utils.iplot", "kind": "module", "doc": "<p>Interactive Plot for Particle Classification.\nCreated on: Oct 16, 2024\nAuthor: Jakub</p>\n"}, {"fullname": "myimg.utils.iplot.interactive_plot", "modulename": "myimg.utils.iplot", "qualname": "interactive_plot", "kind": "function", "doc": "<p>Create an interactive plot for particle classification.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">im</span>, </span><span class=\"param\"><span class=\"n\">ppar</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;output.pkl&#39;</span>, </span><span class=\"param\"><span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "myimg.utils.iplot.show_instructions", "modulename": "myimg.utils.iplot", "qualname": "show_instructions", "kind": "function", "doc": "<p>Display instructions for keyboard shortcuts used in classification.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.utils.iplot.del_bkg_point_close_to_mouse", "modulename": "myimg.utils.iplot", "qualname": "del_bkg_point_close_to_mouse", "kind": "function", "doc": "<p>Delete the nearest particle point within a given threshold and redraw the plot.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>classifier</strong> (ParticleClassifier instance managing particle data.):</p></li>\n<li><p><strong>x, y : float</strong> (Coordinates of the mouse click.):</p></li>\n<li><p><strong>ax : matplotlib.axes.Axes</strong> (The matplotlib axis to redraw the plot on.):</p></li>\n<li><p><strong>im : numpy.ndarray</strong> (The image data to display as the background.):</p></li>\n<li><p><strong>threshold : int, optional</strong> (Distance threshold to consider a point for removal.):</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">classifier</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">ax</span>, </span><span class=\"param\"><span class=\"n\">im</span>, </span><span class=\"param\"><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.utils.iplot.on_keypress", "modulename": "myimg.utils.iplot", "qualname": "on_keypress", "kind": "function", "doc": "<p>Handle key press events for particle classification.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>event</strong> (KeyEvent triggering the function.):</p></li>\n<li><p><strong>ax</strong> (Axes object for plotting.):</p></li>\n<li><p><strong>classifier</strong> (ParticleClassifier for managing data.):</p></li>\n<li><p><strong>im : numpy.ndarray</strong> (Background image for the plot.):</p></li>\n<li><p><strong>ppar</strong> (object containing output_file for saving.):</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">event</span>, </span><span class=\"param\"><span class=\"n\">ax</span>, </span><span class=\"param\"><span class=\"n\">classifier</span>, </span><span class=\"param\"><span class=\"n\">im</span>, </span><span class=\"param\"><span class=\"n\">ppar</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;output&#39;</span>, </span><span class=\"param\"><span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.utils.iplot.on_close", "modulename": "myimg.utils.iplot", "qualname": "on_close", "kind": "function", "doc": "<p>Handle close event, saving all outputs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">event</span>, </span><span class=\"param\"><span class=\"n\">ppar</span>, </span><span class=\"param\"><span class=\"n\">classifier</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;output&#39;</span>, </span><span class=\"param\"><span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.utils.iplot.default_plot_params", "modulename": "myimg.utils.iplot", "qualname": "default_plot_params", "kind": "function", "doc": "<p>Provide default plot parameters based on the input image size.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>image</strong> (PIL.Image or np.ndarray):\nThe input image, used to determine default axis limits.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>DefaultParams</strong>: An instance of DefaultParams containing default values for plot \nparameters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "myimg.utils.label", "modulename": "myimg.utils.label", "kind": "module", "doc": "<h2 id=\"module-myimgutilslabel\">Module: myimg.utils.label</h2>\n\n<p>This module defines function insert_label, with the following features:</p>\n\n<ul>\n<li>The function inserts a label to the upper left corner of an image.</li>\n<li>The function is in this separated module as it is a bit longer.</li>\n<li>The function is usually not called directly, but through myimg.api:</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Inserting scalebar using myimg.api interface</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimage.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyImage</span><span class=\"p\">(</span><span class=\"s1\">&#39;somefile.bmp&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># This calls myimg.utils.label.insert_label function</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">save_with_ext</span><span class=\"p\">(</span><span class=\"s1\">&#39;_l.png&#39;</span><span class=\"p\">)</span> \n</code></pre>\n</div>\n\n<p>Notes to documentation:</p>\n\n<ul>\n<li>The function <em>insert_label</em> in this module does not have a docstring,\nas it is not called directly. </li>\n<li>The docstring with detailed description of all parameters can be found\nin the calling myimg.api.MyImage.label method.\n(the usage of the label method is shown in the example above).</li>\n</ul>\n"}, {"fullname": "myimg.utils.scalebar", "modulename": "myimg.utils.scalebar", "kind": "module", "doc": "<h2 id=\"module-myimgutilsscalebar\">Module: myimg.utils.scalebar</h2>\n\n<p>This module defines function insert_scalebar, with the following features:</p>\n\n<ul>\n<li>The function inserts a scalebar into a micrograph (or diffractogram).</li>\n<li>The function employs many auxiliary functions defined this module.</li>\n<li>The function is usually not called directly, but through myimg.api:</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Import of MyImg + open some image</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (the next command is the standard import of MyImg package</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">myimage.api</span> <span class=\"k\">as</span> <span class=\"nn\">mi</span>     \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">mi</span><span class=\"o\">.</span><span class=\"n\">MyImage</span><span class=\"p\">(</span><span class=\"s1\">&#39;some.png&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Insert scalebar + save the result</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (the next command employs myimg.utils.scalebar.insert_scalebar function</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">scalebar</span><span class=\"p\">(</span><span class=\"s1\">&#39;rwi,100um&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">save_with_ext</span><span class=\"p\">(</span><span class=\"s1\">&#39;_clm.png&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Documentation of the functions in this module:</p>\n\n<ul>\n<li>The functions do not have doctstings as they are not used directly.</li>\n<li>Nevertheless, the functions are reasonably documented in the source code.</li>\n<li>In pdoc-generated-HTML, click <em>View source code</em> to get the commented code.</li>\n</ul>\n\n<p>For documentation of <em>insert_scalebar</em> function in this module,\nsee docs of the calling myimg.api.MyImage.scalebar method;\nthe usaage of the scalebar method is shown in the example above.</p>\n"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();